
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file DonGiaTheoNganh.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'DonGiaTheoNganh' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DonGiaTheoNganhBase : EntityBase, IDonGiaTheoNganh, IEntityId<DonGiaTheoNganhKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DonGiaTheoNganhEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DonGiaTheoNganhEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DonGiaTheoNganhEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<DonGiaTheoNganh> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DonGiaTheoNganhEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DonGiaTheoNganhEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DonGiaTheoNganhBase"/> instance.
		///</summary>
		public DonGiaTheoNganhBase()
		{
			this.entityData = new DonGiaTheoNganhEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DonGiaTheoNganhBase"/> instance.
		///</summary>
		///<param name="_maQuanLy"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_donGiaCh"></param>
		///<param name="_donGiaTgkc"></param>
		///<param name="_donGiaTgc"></param>
		///<param name="_donGiaHocPhan"></param>
		///<param name="_donGiaLt"></param>
		///<param name="_donGiaTh"></param>
		///<param name="_maDonGiaNhomNganh"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_donGiaClc"></param>
		///<param name="_heSoQuyDoiChatLuong"></param>
		///<param name="_donGiaTrongChuan"></param>
		///<param name="_donGiaNgoaiChuan"></param>
		///<param name="_maHinhThucDaoTao"></param>
		///<param name="_bacDaoTao"></param>
		///<param name="_ngonNguGiangDay"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maNhomMon"></param>
		///<param name="_nhomMonHoc"></param>
		///<param name="_donGiaNgoaiNgu"></param>
		///<param name="_donGiaDoAnClc"></param>
		public DonGiaTheoNganhBase(System.String _maQuanLy, System.Int32? _maLoaiGiangVien, 
			System.Int32? _maHocHam, System.Int32? _maHocVi, System.Decimal? _donGiaCh, 
			System.Decimal? _donGiaTgkc, System.Decimal? _donGiaTgc, System.Decimal? _donGiaHocPhan, 
			System.Decimal? _donGiaLt, System.Decimal? _donGiaTh, System.Int32? _maDonGiaNhomNganh, 
			System.DateTime? _ngayCapNhat, System.String _nguoiCapNhat, System.Decimal? _donGiaClc, 
			System.Decimal? _heSoQuyDoiChatLuong, System.Decimal? _donGiaTrongChuan, System.Decimal? _donGiaNgoaiChuan, 
			System.String _maHinhThucDaoTao, System.String _bacDaoTao, System.String _ngonNguGiangDay, 
			System.String _namHoc, System.String _hocKy, System.Int32? _maNhomMon, System.String _nhomMonHoc, 
			System.Decimal? _donGiaNgoaiNgu, System.Decimal? _donGiaDoAnClc)
		{
			this.entityData = new DonGiaTheoNganhEntityData();
			this.backupData = null;

			this.MaQuanLy = _maQuanLy;
			this.MaLoaiGiangVien = _maLoaiGiangVien;
			this.MaHocHam = _maHocHam;
			this.MaHocVi = _maHocVi;
			this.DonGiaCh = _donGiaCh;
			this.DonGiaTgkc = _donGiaTgkc;
			this.DonGiaTgc = _donGiaTgc;
			this.DonGiaHocPhan = _donGiaHocPhan;
			this.DonGiaLt = _donGiaLt;
			this.DonGiaTh = _donGiaTh;
			this.MaDonGiaNhomNganh = _maDonGiaNhomNganh;
			this.NgayCapNhat = _ngayCapNhat;
			this.NguoiCapNhat = _nguoiCapNhat;
			this.DonGiaClc = _donGiaClc;
			this.HeSoQuyDoiChatLuong = _heSoQuyDoiChatLuong;
			this.DonGiaTrongChuan = _donGiaTrongChuan;
			this.DonGiaNgoaiChuan = _donGiaNgoaiChuan;
			this.MaHinhThucDaoTao = _maHinhThucDaoTao;
			this.BacDaoTao = _bacDaoTao;
			this.NgonNguGiangDay = _ngonNguGiangDay;
			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.MaNhomMon = _maNhomMon;
			this.NhomMonHoc = _nhomMonHoc;
			this.DonGiaNgoaiNgu = _donGiaNgoaiNgu;
			this.DonGiaDoAnClc = _donGiaDoAnClc;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="DonGiaTheoNganh"/> instance.
		///</summary>
		///<param name="_maQuanLy"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_donGiaCh"></param>
		///<param name="_donGiaTgkc"></param>
		///<param name="_donGiaTgc"></param>
		///<param name="_donGiaHocPhan"></param>
		///<param name="_donGiaLt"></param>
		///<param name="_donGiaTh"></param>
		///<param name="_maDonGiaNhomNganh"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_donGiaClc"></param>
		///<param name="_heSoQuyDoiChatLuong"></param>
		///<param name="_donGiaTrongChuan"></param>
		///<param name="_donGiaNgoaiChuan"></param>
		///<param name="_maHinhThucDaoTao"></param>
		///<param name="_bacDaoTao"></param>
		///<param name="_ngonNguGiangDay"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maNhomMon"></param>
		///<param name="_nhomMonHoc"></param>
		///<param name="_donGiaNgoaiNgu"></param>
		///<param name="_donGiaDoAnClc"></param>
		public static DonGiaTheoNganh CreateDonGiaTheoNganh(System.String _maQuanLy, System.Int32? _maLoaiGiangVien, 
			System.Int32? _maHocHam, System.Int32? _maHocVi, System.Decimal? _donGiaCh, 
			System.Decimal? _donGiaTgkc, System.Decimal? _donGiaTgc, System.Decimal? _donGiaHocPhan, 
			System.Decimal? _donGiaLt, System.Decimal? _donGiaTh, System.Int32? _maDonGiaNhomNganh, 
			System.DateTime? _ngayCapNhat, System.String _nguoiCapNhat, System.Decimal? _donGiaClc, 
			System.Decimal? _heSoQuyDoiChatLuong, System.Decimal? _donGiaTrongChuan, System.Decimal? _donGiaNgoaiChuan, 
			System.String _maHinhThucDaoTao, System.String _bacDaoTao, System.String _ngonNguGiangDay, 
			System.String _namHoc, System.String _hocKy, System.Int32? _maNhomMon, System.String _nhomMonHoc, 
			System.Decimal? _donGiaNgoaiNgu, System.Decimal? _donGiaDoAnClc)
		{
			DonGiaTheoNganh newDonGiaTheoNganh = new DonGiaTheoNganh();
			newDonGiaTheoNganh.MaQuanLy = _maQuanLy;
			newDonGiaTheoNganh.MaLoaiGiangVien = _maLoaiGiangVien;
			newDonGiaTheoNganh.MaHocHam = _maHocHam;
			newDonGiaTheoNganh.MaHocVi = _maHocVi;
			newDonGiaTheoNganh.DonGiaCh = _donGiaCh;
			newDonGiaTheoNganh.DonGiaTgkc = _donGiaTgkc;
			newDonGiaTheoNganh.DonGiaTgc = _donGiaTgc;
			newDonGiaTheoNganh.DonGiaHocPhan = _donGiaHocPhan;
			newDonGiaTheoNganh.DonGiaLt = _donGiaLt;
			newDonGiaTheoNganh.DonGiaTh = _donGiaTh;
			newDonGiaTheoNganh.MaDonGiaNhomNganh = _maDonGiaNhomNganh;
			newDonGiaTheoNganh.NgayCapNhat = _ngayCapNhat;
			newDonGiaTheoNganh.NguoiCapNhat = _nguoiCapNhat;
			newDonGiaTheoNganh.DonGiaClc = _donGiaClc;
			newDonGiaTheoNganh.HeSoQuyDoiChatLuong = _heSoQuyDoiChatLuong;
			newDonGiaTheoNganh.DonGiaTrongChuan = _donGiaTrongChuan;
			newDonGiaTheoNganh.DonGiaNgoaiChuan = _donGiaNgoaiChuan;
			newDonGiaTheoNganh.MaHinhThucDaoTao = _maHinhThucDaoTao;
			newDonGiaTheoNganh.BacDaoTao = _bacDaoTao;
			newDonGiaTheoNganh.NgonNguGiangDay = _ngonNguGiangDay;
			newDonGiaTheoNganh.NamHoc = _namHoc;
			newDonGiaTheoNganh.HocKy = _hocKy;
			newDonGiaTheoNganh.MaNhomMon = _maNhomMon;
			newDonGiaTheoNganh.NhomMonHoc = _nhomMonHoc;
			newDonGiaTheoNganh.DonGiaNgoaiNgu = _donGiaNgoaiNgu;
			newDonGiaTheoNganh.DonGiaDoAnClc = _donGiaDoAnClc;
			return newDonGiaTheoNganh;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Id is required")]




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(DonGiaTheoNganhColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaQuanLy
		{
			get
			{
				return this.entityData.MaQuanLy; 
			}
			
			set
			{
				if (this.entityData.MaQuanLy == value)
					return;
				
                OnPropertyChanging("MaQuanLy");                    
				OnColumnChanging(DonGiaTheoNganhColumn.MaQuanLy, this.entityData.MaQuanLy);
				this.entityData.MaQuanLy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.MaQuanLy, this.entityData.MaQuanLy);
				OnPropertyChanged("MaQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLoaiGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaLoaiGiangVien
		{
			get
			{
				return this.entityData.MaLoaiGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaLoaiGiangVien == value)
					return;
				
                OnPropertyChanging("MaLoaiGiangVien");                    
				OnColumnChanging(DonGiaTheoNganhColumn.MaLoaiGiangVien, this.entityData.MaLoaiGiangVien);
				this.entityData.MaLoaiGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.MaLoaiGiangVien, this.entityData.MaLoaiGiangVien);
				OnPropertyChanged("MaLoaiGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocHam property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocHam
		{
			get
			{
				return this.entityData.MaHocHam; 
			}
			
			set
			{
				if (this.entityData.MaHocHam == value)
					return;
				
                OnPropertyChanging("MaHocHam");                    
				OnColumnChanging(DonGiaTheoNganhColumn.MaHocHam, this.entityData.MaHocHam);
				this.entityData.MaHocHam = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.MaHocHam, this.entityData.MaHocHam);
				OnPropertyChanged("MaHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocVi property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocVi
		{
			get
			{
				return this.entityData.MaHocVi; 
			}
			
			set
			{
				if (this.entityData.MaHocVi == value)
					return;
				
                OnPropertyChanging("MaHocVi");                    
				OnColumnChanging(DonGiaTheoNganhColumn.MaHocVi, this.entityData.MaHocVi);
				this.entityData.MaHocVi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.MaHocVi, this.entityData.MaHocVi);
				OnPropertyChanged("MaHocVi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaCh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGiaCh
		{
			get
			{
				return this.entityData.DonGiaCh; 
			}
			
			set
			{
				if (this.entityData.DonGiaCh == value)
					return;
				
                OnPropertyChanging("DonGiaCh");                    
				OnColumnChanging(DonGiaTheoNganhColumn.DonGiaCh, this.entityData.DonGiaCh);
				this.entityData.DonGiaCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.DonGiaCh, this.entityData.DonGiaCh);
				OnPropertyChanged("DonGiaCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaTgkc property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGiaTgkc
		{
			get
			{
				return this.entityData.DonGiaTgkc; 
			}
			
			set
			{
				if (this.entityData.DonGiaTgkc == value)
					return;
				
                OnPropertyChanging("DonGiaTgkc");                    
				OnColumnChanging(DonGiaTheoNganhColumn.DonGiaTgkc, this.entityData.DonGiaTgkc);
				this.entityData.DonGiaTgkc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.DonGiaTgkc, this.entityData.DonGiaTgkc);
				OnPropertyChanged("DonGiaTgkc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaTgc property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGiaTgc
		{
			get
			{
				return this.entityData.DonGiaTgc; 
			}
			
			set
			{
				if (this.entityData.DonGiaTgc == value)
					return;
				
                OnPropertyChanging("DonGiaTgc");                    
				OnColumnChanging(DonGiaTheoNganhColumn.DonGiaTgc, this.entityData.DonGiaTgc);
				this.entityData.DonGiaTgc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.DonGiaTgc, this.entityData.DonGiaTgc);
				OnPropertyChanged("DonGiaTgc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGiaHocPhan
		{
			get
			{
				return this.entityData.DonGiaHocPhan; 
			}
			
			set
			{
				if (this.entityData.DonGiaHocPhan == value)
					return;
				
                OnPropertyChanging("DonGiaHocPhan");                    
				OnColumnChanging(DonGiaTheoNganhColumn.DonGiaHocPhan, this.entityData.DonGiaHocPhan);
				this.entityData.DonGiaHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.DonGiaHocPhan, this.entityData.DonGiaHocPhan);
				OnPropertyChanged("DonGiaHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaLt property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGiaLt
		{
			get
			{
				return this.entityData.DonGiaLt; 
			}
			
			set
			{
				if (this.entityData.DonGiaLt == value)
					return;
				
                OnPropertyChanging("DonGiaLt");                    
				OnColumnChanging(DonGiaTheoNganhColumn.DonGiaLt, this.entityData.DonGiaLt);
				this.entityData.DonGiaLt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.DonGiaLt, this.entityData.DonGiaLt);
				OnPropertyChanged("DonGiaLt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaTh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGiaTh
		{
			get
			{
				return this.entityData.DonGiaTh; 
			}
			
			set
			{
				if (this.entityData.DonGiaTh == value)
					return;
				
                OnPropertyChanging("DonGiaTh");                    
				OnColumnChanging(DonGiaTheoNganhColumn.DonGiaTh, this.entityData.DonGiaTh);
				this.entityData.DonGiaTh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.DonGiaTh, this.entityData.DonGiaTh);
				OnPropertyChanged("DonGiaTh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaDonGiaNhomNganh property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaDonGiaNhomNganh
		{
			get
			{
				return this.entityData.MaDonGiaNhomNganh; 
			}
			
			set
			{
				if (this.entityData.MaDonGiaNhomNganh == value)
					return;
				
                OnPropertyChanging("MaDonGiaNhomNganh");                    
				OnColumnChanging(DonGiaTheoNganhColumn.MaDonGiaNhomNganh, this.entityData.MaDonGiaNhomNganh);
				this.entityData.MaDonGiaNhomNganh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.MaDonGiaNhomNganh, this.entityData.MaDonGiaNhomNganh);
				OnPropertyChanged("MaDonGiaNhomNganh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayCapNhat
		{
			get
			{
				return this.entityData.NgayCapNhat; 
			}
			
			set
			{
				if (this.entityData.NgayCapNhat == value)
					return;
				
                OnPropertyChanging("NgayCapNhat");                    
				OnColumnChanging(DonGiaTheoNganhColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				this.entityData.NgayCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				OnPropertyChanged("NgayCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NguoiCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NguoiCapNhat
		{
			get
			{
				return this.entityData.NguoiCapNhat; 
			}
			
			set
			{
				if (this.entityData.NguoiCapNhat == value)
					return;
				
                OnPropertyChanging("NguoiCapNhat");                    
				OnColumnChanging(DonGiaTheoNganhColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				this.entityData.NguoiCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				OnPropertyChanged("NguoiCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaClc property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGiaClc
		{
			get
			{
				return this.entityData.DonGiaClc; 
			}
			
			set
			{
				if (this.entityData.DonGiaClc == value)
					return;
				
                OnPropertyChanging("DonGiaClc");                    
				OnColumnChanging(DonGiaTheoNganhColumn.DonGiaClc, this.entityData.DonGiaClc);
				this.entityData.DonGiaClc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.DonGiaClc, this.entityData.DonGiaClc);
				OnPropertyChanged("DonGiaClc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoQuyDoiChatLuong property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoQuyDoiChatLuong
		{
			get
			{
				return this.entityData.HeSoQuyDoiChatLuong; 
			}
			
			set
			{
				if (this.entityData.HeSoQuyDoiChatLuong == value)
					return;
				
                OnPropertyChanging("HeSoQuyDoiChatLuong");                    
				OnColumnChanging(DonGiaTheoNganhColumn.HeSoQuyDoiChatLuong, this.entityData.HeSoQuyDoiChatLuong);
				this.entityData.HeSoQuyDoiChatLuong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.HeSoQuyDoiChatLuong, this.entityData.HeSoQuyDoiChatLuong);
				OnPropertyChanged("HeSoQuyDoiChatLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaTrongChuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGiaTrongChuan
		{
			get
			{
				return this.entityData.DonGiaTrongChuan; 
			}
			
			set
			{
				if (this.entityData.DonGiaTrongChuan == value)
					return;
				
                OnPropertyChanging("DonGiaTrongChuan");                    
				OnColumnChanging(DonGiaTheoNganhColumn.DonGiaTrongChuan, this.entityData.DonGiaTrongChuan);
				this.entityData.DonGiaTrongChuan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.DonGiaTrongChuan, this.entityData.DonGiaTrongChuan);
				OnPropertyChanged("DonGiaTrongChuan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaNgoaiChuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGiaNgoaiChuan
		{
			get
			{
				return this.entityData.DonGiaNgoaiChuan; 
			}
			
			set
			{
				if (this.entityData.DonGiaNgoaiChuan == value)
					return;
				
                OnPropertyChanging("DonGiaNgoaiChuan");                    
				OnColumnChanging(DonGiaTheoNganhColumn.DonGiaNgoaiChuan, this.entityData.DonGiaNgoaiChuan);
				this.entityData.DonGiaNgoaiChuan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.DonGiaNgoaiChuan, this.entityData.DonGiaNgoaiChuan);
				OnPropertyChanged("DonGiaNgoaiChuan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHinhThucDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaHinhThucDaoTao
		{
			get
			{
				return this.entityData.MaHinhThucDaoTao; 
			}
			
			set
			{
				if (this.entityData.MaHinhThucDaoTao == value)
					return;
				
                OnPropertyChanging("MaHinhThucDaoTao");                    
				OnColumnChanging(DonGiaTheoNganhColumn.MaHinhThucDaoTao, this.entityData.MaHinhThucDaoTao);
				this.entityData.MaHinhThucDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.MaHinhThucDaoTao, this.entityData.MaHinhThucDaoTao);
				OnPropertyChanged("MaHinhThucDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BacDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String BacDaoTao
		{
			get
			{
				return this.entityData.BacDaoTao; 
			}
			
			set
			{
				if (this.entityData.BacDaoTao == value)
					return;
				
                OnPropertyChanging("BacDaoTao");                    
				OnColumnChanging(DonGiaTheoNganhColumn.BacDaoTao, this.entityData.BacDaoTao);
				this.entityData.BacDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.BacDaoTao, this.entityData.BacDaoTao);
				OnPropertyChanged("BacDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgonNguGiangDay property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NgonNguGiangDay
		{
			get
			{
				return this.entityData.NgonNguGiangDay; 
			}
			
			set
			{
				if (this.entityData.NgonNguGiangDay == value)
					return;
				
                OnPropertyChanging("NgonNguGiangDay");                    
				OnColumnChanging(DonGiaTheoNganhColumn.NgonNguGiangDay, this.entityData.NgonNguGiangDay);
				this.entityData.NgonNguGiangDay = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.NgonNguGiangDay, this.entityData.NgonNguGiangDay);
				OnPropertyChanged("NgonNguGiangDay");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(DonGiaTheoNganhColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(DonGiaTheoNganhColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaNhomMon property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaNhomMon
		{
			get
			{
				return this.entityData.MaNhomMon; 
			}
			
			set
			{
				if (this.entityData.MaNhomMon == value)
					return;
				
                OnPropertyChanging("MaNhomMon");                    
				OnColumnChanging(DonGiaTheoNganhColumn.MaNhomMon, this.entityData.MaNhomMon);
				this.entityData.MaNhomMon = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.MaNhomMon, this.entityData.MaNhomMon);
				OnPropertyChanged("MaNhomMon");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NhomMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String NhomMonHoc
		{
			get
			{
				return this.entityData.NhomMonHoc; 
			}
			
			set
			{
				if (this.entityData.NhomMonHoc == value)
					return;
				
                OnPropertyChanging("NhomMonHoc");                    
				OnColumnChanging(DonGiaTheoNganhColumn.NhomMonHoc, this.entityData.NhomMonHoc);
				this.entityData.NhomMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.NhomMonHoc, this.entityData.NhomMonHoc);
				OnPropertyChanged("NhomMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaNgoaiNgu property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGiaNgoaiNgu
		{
			get
			{
				return this.entityData.DonGiaNgoaiNgu; 
			}
			
			set
			{
				if (this.entityData.DonGiaNgoaiNgu == value)
					return;
				
                OnPropertyChanging("DonGiaNgoaiNgu");                    
				OnColumnChanging(DonGiaTheoNganhColumn.DonGiaNgoaiNgu, this.entityData.DonGiaNgoaiNgu);
				this.entityData.DonGiaNgoaiNgu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.DonGiaNgoaiNgu, this.entityData.DonGiaNgoaiNgu);
				OnPropertyChanged("DonGiaNgoaiNgu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaDoAnClc property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGiaDoAnClc
		{
			get
			{
				return this.entityData.DonGiaDoAnClc; 
			}
			
			set
			{
				if (this.entityData.DonGiaDoAnClc == value)
					return;
				
                OnPropertyChanging("DonGiaDoAnClc");                    
				OnColumnChanging(DonGiaTheoNganhColumn.DonGiaDoAnClc, this.entityData.DonGiaDoAnClc);
				this.entityData.DonGiaDoAnClc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonGiaTheoNganhColumn.DonGiaDoAnClc, this.entityData.DonGiaDoAnClc);
				OnPropertyChanged("DonGiaDoAnClc");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="HocHam"/>.
		/// </summary>
		/// <value>The source HocHam for MaHocHam.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual HocHam MaHocHamSource
      	{
            get { return entityData.MaHocHamSource; }
            set { entityData.MaHocHamSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="HocVi"/>.
		/// </summary>
		/// <value>The source HocVi for MaHocVi.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual HocVi MaHocViSource
      	{
            get { return entityData.MaHocViSource; }
            set { entityData.MaHocViSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="LoaiGiangVien"/>.
		/// </summary>
		/// <value>The source LoaiGiangVien for MaLoaiGiangVien.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual LoaiGiangVien MaLoaiGiangVienSource
      	{
            get { return entityData.MaLoaiGiangVienSource; }
            set { entityData.MaLoaiGiangVienSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="NgonNguGiangDay"/>.
		/// </summary>
		/// <value>The source NgonNguGiangDay for NgonNguGiangDay.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual NgonNguGiangDay NgonNguGiangDaySource
      	{
            get { return entityData.NgonNguGiangDaySource; }
            set { entityData.NgonNguGiangDaySource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="NhomMonHoc"/>.
		/// </summary>
		/// <value>The source NhomMonHoc for MaNhomMon.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual NhomMonHoc MaNhomMonSource
      	{
            get { return entityData.MaNhomMonSource; }
            set { entityData.MaNhomMonSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaQuanLy", "Ma Quan Ly", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NguoiCapNhat", "Nguoi Cap Nhat", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaHinhThucDaoTao", "Ma Hinh Thuc Dao Tao", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BacDaoTao", "Bac Dao Tao", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NgonNguGiangDay", "Ngon Ngu Giang Day", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NhomMonHoc", "Nhom Mon Hoc", 500));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "DonGiaTheoNganh"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "MaQuanLy", "MaLoaiGiangVien", "MaHocHam", "MaHocVi", "DonGiaCH", "DonGiaTGKC", "DonGiaTGC", "DonGiaHocPhan", "DonGiaLT", "DonGiaTH", "MaDonGiaNhomNganh", "NgayCapNhat", "NguoiCapNhat", "DonGiaClc", "HeSoQuyDoiChatLuong", "DonGiaTrongChuan", "DonGiaNgoaiChuan", "MaHinhThucDaoTao", "BacDaoTao", "NgonNguGiangDay", "NamHoc", "HocKy", "MaNhomMon", "NhomMonHoc", "DonGiaNgoaiNgu", "DonGiaDoAnClc"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DonGiaTheoNganhEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (DonGiaTheoNganh) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<DonGiaTheoNganh>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as DonGiaTheoNganh);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed DonGiaTheoNganh Entity 
		///</summary>
		protected virtual DonGiaTheoNganh Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			DonGiaTheoNganh copy = new DonGiaTheoNganh();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.MaQuanLy = this.MaQuanLy;
				copy.MaLoaiGiangVien = this.MaLoaiGiangVien;
				copy.MaHocHam = this.MaHocHam;
				copy.MaHocVi = this.MaHocVi;
				copy.DonGiaCh = this.DonGiaCh;
				copy.DonGiaTgkc = this.DonGiaTgkc;
				copy.DonGiaTgc = this.DonGiaTgc;
				copy.DonGiaHocPhan = this.DonGiaHocPhan;
				copy.DonGiaLt = this.DonGiaLt;
				copy.DonGiaTh = this.DonGiaTh;
				copy.MaDonGiaNhomNganh = this.MaDonGiaNhomNganh;
				copy.NgayCapNhat = this.NgayCapNhat;
				copy.NguoiCapNhat = this.NguoiCapNhat;
				copy.DonGiaClc = this.DonGiaClc;
				copy.HeSoQuyDoiChatLuong = this.HeSoQuyDoiChatLuong;
				copy.DonGiaTrongChuan = this.DonGiaTrongChuan;
				copy.DonGiaNgoaiChuan = this.DonGiaNgoaiChuan;
				copy.MaHinhThucDaoTao = this.MaHinhThucDaoTao;
				copy.BacDaoTao = this.BacDaoTao;
				copy.NgonNguGiangDay = this.NgonNguGiangDay;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaNhomMon = this.MaNhomMon;
				copy.NhomMonHoc = this.NhomMonHoc;
				copy.DonGiaNgoaiNgu = this.DonGiaNgoaiNgu;
				copy.DonGiaDoAnClc = this.DonGiaDoAnClc;
			
			if (this.MaHocHamSource != null && existingCopies.Contains(this.MaHocHamSource))
				copy.MaHocHamSource = existingCopies[this.MaHocHamSource] as HocHam;
			else
				copy.MaHocHamSource = MakeCopyOf(this.MaHocHamSource, existingCopies) as HocHam;
			if (this.MaHocViSource != null && existingCopies.Contains(this.MaHocViSource))
				copy.MaHocViSource = existingCopies[this.MaHocViSource] as HocVi;
			else
				copy.MaHocViSource = MakeCopyOf(this.MaHocViSource, existingCopies) as HocVi;
			if (this.MaLoaiGiangVienSource != null && existingCopies.Contains(this.MaLoaiGiangVienSource))
				copy.MaLoaiGiangVienSource = existingCopies[this.MaLoaiGiangVienSource] as LoaiGiangVien;
			else
				copy.MaLoaiGiangVienSource = MakeCopyOf(this.MaLoaiGiangVienSource, existingCopies) as LoaiGiangVien;
			if (this.NgonNguGiangDaySource != null && existingCopies.Contains(this.NgonNguGiangDaySource))
				copy.NgonNguGiangDaySource = existingCopies[this.NgonNguGiangDaySource] as NgonNguGiangDay;
			else
				copy.NgonNguGiangDaySource = MakeCopyOf(this.NgonNguGiangDaySource, existingCopies) as NgonNguGiangDay;
			if (this.MaNhomMonSource != null && existingCopies.Contains(this.MaNhomMonSource))
				copy.MaNhomMonSource = existingCopies[this.MaNhomMonSource] as NhomMonHoc;
			else
				copy.MaNhomMonSource = MakeCopyOf(this.MaNhomMonSource, existingCopies) as NhomMonHoc;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed DonGiaTheoNganh Entity 
		///</summary>
		public virtual DonGiaTheoNganh Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed DonGiaTheoNganh Entity which is a deep copy of the current entity.
		///</summary>
		public virtual DonGiaTheoNganh DeepCopy()
		{
			return EntityHelper.Clone<DonGiaTheoNganh>(this as DonGiaTheoNganh);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DonGiaTheoNganhEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DonGiaTheoNganhEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DonGiaTheoNganhEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DonGiaTheoNganhColumn column)
		{
			switch(column)
			{
					case DonGiaTheoNganhColumn.Id:
					return entityData.Id != _originalData.Id;
					case DonGiaTheoNganhColumn.MaQuanLy:
					return entityData.MaQuanLy != _originalData.MaQuanLy;
					case DonGiaTheoNganhColumn.MaLoaiGiangVien:
					return entityData.MaLoaiGiangVien != _originalData.MaLoaiGiangVien;
					case DonGiaTheoNganhColumn.MaHocHam:
					return entityData.MaHocHam != _originalData.MaHocHam;
					case DonGiaTheoNganhColumn.MaHocVi:
					return entityData.MaHocVi != _originalData.MaHocVi;
					case DonGiaTheoNganhColumn.DonGiaCh:
					return entityData.DonGiaCh != _originalData.DonGiaCh;
					case DonGiaTheoNganhColumn.DonGiaTgkc:
					return entityData.DonGiaTgkc != _originalData.DonGiaTgkc;
					case DonGiaTheoNganhColumn.DonGiaTgc:
					return entityData.DonGiaTgc != _originalData.DonGiaTgc;
					case DonGiaTheoNganhColumn.DonGiaHocPhan:
					return entityData.DonGiaHocPhan != _originalData.DonGiaHocPhan;
					case DonGiaTheoNganhColumn.DonGiaLt:
					return entityData.DonGiaLt != _originalData.DonGiaLt;
					case DonGiaTheoNganhColumn.DonGiaTh:
					return entityData.DonGiaTh != _originalData.DonGiaTh;
					case DonGiaTheoNganhColumn.MaDonGiaNhomNganh:
					return entityData.MaDonGiaNhomNganh != _originalData.MaDonGiaNhomNganh;
					case DonGiaTheoNganhColumn.NgayCapNhat:
					return entityData.NgayCapNhat != _originalData.NgayCapNhat;
					case DonGiaTheoNganhColumn.NguoiCapNhat:
					return entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
					case DonGiaTheoNganhColumn.DonGiaClc:
					return entityData.DonGiaClc != _originalData.DonGiaClc;
					case DonGiaTheoNganhColumn.HeSoQuyDoiChatLuong:
					return entityData.HeSoQuyDoiChatLuong != _originalData.HeSoQuyDoiChatLuong;
					case DonGiaTheoNganhColumn.DonGiaTrongChuan:
					return entityData.DonGiaTrongChuan != _originalData.DonGiaTrongChuan;
					case DonGiaTheoNganhColumn.DonGiaNgoaiChuan:
					return entityData.DonGiaNgoaiChuan != _originalData.DonGiaNgoaiChuan;
					case DonGiaTheoNganhColumn.MaHinhThucDaoTao:
					return entityData.MaHinhThucDaoTao != _originalData.MaHinhThucDaoTao;
					case DonGiaTheoNganhColumn.BacDaoTao:
					return entityData.BacDaoTao != _originalData.BacDaoTao;
					case DonGiaTheoNganhColumn.NgonNguGiangDay:
					return entityData.NgonNguGiangDay != _originalData.NgonNguGiangDay;
					case DonGiaTheoNganhColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case DonGiaTheoNganhColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case DonGiaTheoNganhColumn.MaNhomMon:
					return entityData.MaNhomMon != _originalData.MaNhomMon;
					case DonGiaTheoNganhColumn.NhomMonHoc:
					return entityData.NhomMonHoc != _originalData.NhomMonHoc;
					case DonGiaTheoNganhColumn.DonGiaNgoaiNgu:
					return entityData.DonGiaNgoaiNgu != _originalData.DonGiaNgoaiNgu;
					case DonGiaTheoNganhColumn.DonGiaDoAnClc:
					return entityData.DonGiaDoAnClc != _originalData.DonGiaDoAnClc;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DonGiaTheoNganhColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.MaQuanLy != _originalData.MaQuanLy;
			result = result || entityData.MaLoaiGiangVien != _originalData.MaLoaiGiangVien;
			result = result || entityData.MaHocHam != _originalData.MaHocHam;
			result = result || entityData.MaHocVi != _originalData.MaHocVi;
			result = result || entityData.DonGiaCh != _originalData.DonGiaCh;
			result = result || entityData.DonGiaTgkc != _originalData.DonGiaTgkc;
			result = result || entityData.DonGiaTgc != _originalData.DonGiaTgc;
			result = result || entityData.DonGiaHocPhan != _originalData.DonGiaHocPhan;
			result = result || entityData.DonGiaLt != _originalData.DonGiaLt;
			result = result || entityData.DonGiaTh != _originalData.DonGiaTh;
			result = result || entityData.MaDonGiaNhomNganh != _originalData.MaDonGiaNhomNganh;
			result = result || entityData.NgayCapNhat != _originalData.NgayCapNhat;
			result = result || entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
			result = result || entityData.DonGiaClc != _originalData.DonGiaClc;
			result = result || entityData.HeSoQuyDoiChatLuong != _originalData.HeSoQuyDoiChatLuong;
			result = result || entityData.DonGiaTrongChuan != _originalData.DonGiaTrongChuan;
			result = result || entityData.DonGiaNgoaiChuan != _originalData.DonGiaNgoaiChuan;
			result = result || entityData.MaHinhThucDaoTao != _originalData.MaHinhThucDaoTao;
			result = result || entityData.BacDaoTao != _originalData.BacDaoTao;
			result = result || entityData.NgonNguGiangDay != _originalData.NgonNguGiangDay;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.MaNhomMon != _originalData.MaNhomMon;
			result = result || entityData.NhomMonHoc != _originalData.NhomMonHoc;
			result = result || entityData.DonGiaNgoaiNgu != _originalData.DonGiaNgoaiNgu;
			result = result || entityData.DonGiaDoAnClc != _originalData.DonGiaDoAnClc;
			return result;
		}	
		
		///<summary>
		///  Returns a DonGiaTheoNganh Entity with the original data.
		///</summary>
		public DonGiaTheoNganh GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDonGiaTheoNganh(
				_originalData.MaQuanLy,
				_originalData.MaLoaiGiangVien,
				_originalData.MaHocHam,
				_originalData.MaHocVi,
				_originalData.DonGiaCh,
				_originalData.DonGiaTgkc,
				_originalData.DonGiaTgc,
				_originalData.DonGiaHocPhan,
				_originalData.DonGiaLt,
				_originalData.DonGiaTh,
				_originalData.MaDonGiaNhomNganh,
				_originalData.NgayCapNhat,
				_originalData.NguoiCapNhat,
				_originalData.DonGiaClc,
				_originalData.HeSoQuyDoiChatLuong,
				_originalData.DonGiaTrongChuan,
				_originalData.DonGiaNgoaiChuan,
				_originalData.MaHinhThucDaoTao,
				_originalData.BacDaoTao,
				_originalData.NgonNguGiangDay,
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.MaNhomMon,
				_originalData.NhomMonHoc,
				_originalData.DonGiaNgoaiNgu,
				_originalData.DonGiaDoAnClc
				);
				
			return (DonGiaTheoNganh)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DonGiaTheoNganhBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DonGiaTheoNganhBase)
				return ValueEquals(this, (DonGiaTheoNganhBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DonGiaTheoNganhBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.MaQuanLy == null) ? string.Empty : this.MaQuanLy.ToString()).GetHashCode() ^ 
					((this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString()).GetHashCode() ^ 
					((this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString()).GetHashCode() ^ 
					((this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString()).GetHashCode() ^ 
					((this.DonGiaCh == null) ? string.Empty : this.DonGiaCh.ToString()).GetHashCode() ^ 
					((this.DonGiaTgkc == null) ? string.Empty : this.DonGiaTgkc.ToString()).GetHashCode() ^ 
					((this.DonGiaTgc == null) ? string.Empty : this.DonGiaTgc.ToString()).GetHashCode() ^ 
					((this.DonGiaHocPhan == null) ? string.Empty : this.DonGiaHocPhan.ToString()).GetHashCode() ^ 
					((this.DonGiaLt == null) ? string.Empty : this.DonGiaLt.ToString()).GetHashCode() ^ 
					((this.DonGiaTh == null) ? string.Empty : this.DonGiaTh.ToString()).GetHashCode() ^ 
					((this.MaDonGiaNhomNganh == null) ? string.Empty : this.MaDonGiaNhomNganh.ToString()).GetHashCode() ^ 
					((this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString()).GetHashCode() ^ 
					((this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString()).GetHashCode() ^ 
					((this.DonGiaClc == null) ? string.Empty : this.DonGiaClc.ToString()).GetHashCode() ^ 
					((this.HeSoQuyDoiChatLuong == null) ? string.Empty : this.HeSoQuyDoiChatLuong.ToString()).GetHashCode() ^ 
					((this.DonGiaTrongChuan == null) ? string.Empty : this.DonGiaTrongChuan.ToString()).GetHashCode() ^ 
					((this.DonGiaNgoaiChuan == null) ? string.Empty : this.DonGiaNgoaiChuan.ToString()).GetHashCode() ^ 
					((this.MaHinhThucDaoTao == null) ? string.Empty : this.MaHinhThucDaoTao.ToString()).GetHashCode() ^ 
					((this.BacDaoTao == null) ? string.Empty : this.BacDaoTao.ToString()).GetHashCode() ^ 
					((this.NgonNguGiangDay == null) ? string.Empty : this.NgonNguGiangDay.ToString()).GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode() ^ 
					((this.MaNhomMon == null) ? string.Empty : this.MaNhomMon.ToString()).GetHashCode() ^ 
					((this.NhomMonHoc == null) ? string.Empty : this.NhomMonHoc.ToString()).GetHashCode() ^ 
					((this.DonGiaNgoaiNgu == null) ? string.Empty : this.DonGiaNgoaiNgu.ToString()).GetHashCode() ^ 
					((this.DonGiaDoAnClc == null) ? string.Empty : this.DonGiaDoAnClc.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DonGiaTheoNganhBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DonGiaTheoNganhBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DonGiaTheoNganhBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DonGiaTheoNganhBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DonGiaTheoNganhBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DonGiaTheoNganhBase Object1, DonGiaTheoNganhBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.MaQuanLy != null && Object2.MaQuanLy != null )
			{
				if (Object1.MaQuanLy != Object2.MaQuanLy)
					equal = false;
			}
			else if (Object1.MaQuanLy == null ^ Object2.MaQuanLy == null )
			{
				equal = false;
			}
			if ( Object1.MaLoaiGiangVien != null && Object2.MaLoaiGiangVien != null )
			{
				if (Object1.MaLoaiGiangVien != Object2.MaLoaiGiangVien)
					equal = false;
			}
			else if (Object1.MaLoaiGiangVien == null ^ Object2.MaLoaiGiangVien == null )
			{
				equal = false;
			}
			if ( Object1.MaHocHam != null && Object2.MaHocHam != null )
			{
				if (Object1.MaHocHam != Object2.MaHocHam)
					equal = false;
			}
			else if (Object1.MaHocHam == null ^ Object2.MaHocHam == null )
			{
				equal = false;
			}
			if ( Object1.MaHocVi != null && Object2.MaHocVi != null )
			{
				if (Object1.MaHocVi != Object2.MaHocVi)
					equal = false;
			}
			else if (Object1.MaHocVi == null ^ Object2.MaHocVi == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaCh != null && Object2.DonGiaCh != null )
			{
				if (Object1.DonGiaCh != Object2.DonGiaCh)
					equal = false;
			}
			else if (Object1.DonGiaCh == null ^ Object2.DonGiaCh == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaTgkc != null && Object2.DonGiaTgkc != null )
			{
				if (Object1.DonGiaTgkc != Object2.DonGiaTgkc)
					equal = false;
			}
			else if (Object1.DonGiaTgkc == null ^ Object2.DonGiaTgkc == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaTgc != null && Object2.DonGiaTgc != null )
			{
				if (Object1.DonGiaTgc != Object2.DonGiaTgc)
					equal = false;
			}
			else if (Object1.DonGiaTgc == null ^ Object2.DonGiaTgc == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaHocPhan != null && Object2.DonGiaHocPhan != null )
			{
				if (Object1.DonGiaHocPhan != Object2.DonGiaHocPhan)
					equal = false;
			}
			else if (Object1.DonGiaHocPhan == null ^ Object2.DonGiaHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaLt != null && Object2.DonGiaLt != null )
			{
				if (Object1.DonGiaLt != Object2.DonGiaLt)
					equal = false;
			}
			else if (Object1.DonGiaLt == null ^ Object2.DonGiaLt == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaTh != null && Object2.DonGiaTh != null )
			{
				if (Object1.DonGiaTh != Object2.DonGiaTh)
					equal = false;
			}
			else if (Object1.DonGiaTh == null ^ Object2.DonGiaTh == null )
			{
				equal = false;
			}
			if ( Object1.MaDonGiaNhomNganh != null && Object2.MaDonGiaNhomNganh != null )
			{
				if (Object1.MaDonGiaNhomNganh != Object2.MaDonGiaNhomNganh)
					equal = false;
			}
			else if (Object1.MaDonGiaNhomNganh == null ^ Object2.MaDonGiaNhomNganh == null )
			{
				equal = false;
			}
			if ( Object1.NgayCapNhat != null && Object2.NgayCapNhat != null )
			{
				if (Object1.NgayCapNhat != Object2.NgayCapNhat)
					equal = false;
			}
			else if (Object1.NgayCapNhat == null ^ Object2.NgayCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.NguoiCapNhat != null && Object2.NguoiCapNhat != null )
			{
				if (Object1.NguoiCapNhat != Object2.NguoiCapNhat)
					equal = false;
			}
			else if (Object1.NguoiCapNhat == null ^ Object2.NguoiCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaClc != null && Object2.DonGiaClc != null )
			{
				if (Object1.DonGiaClc != Object2.DonGiaClc)
					equal = false;
			}
			else if (Object1.DonGiaClc == null ^ Object2.DonGiaClc == null )
			{
				equal = false;
			}
			if ( Object1.HeSoQuyDoiChatLuong != null && Object2.HeSoQuyDoiChatLuong != null )
			{
				if (Object1.HeSoQuyDoiChatLuong != Object2.HeSoQuyDoiChatLuong)
					equal = false;
			}
			else if (Object1.HeSoQuyDoiChatLuong == null ^ Object2.HeSoQuyDoiChatLuong == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaTrongChuan != null && Object2.DonGiaTrongChuan != null )
			{
				if (Object1.DonGiaTrongChuan != Object2.DonGiaTrongChuan)
					equal = false;
			}
			else if (Object1.DonGiaTrongChuan == null ^ Object2.DonGiaTrongChuan == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaNgoaiChuan != null && Object2.DonGiaNgoaiChuan != null )
			{
				if (Object1.DonGiaNgoaiChuan != Object2.DonGiaNgoaiChuan)
					equal = false;
			}
			else if (Object1.DonGiaNgoaiChuan == null ^ Object2.DonGiaNgoaiChuan == null )
			{
				equal = false;
			}
			if ( Object1.MaHinhThucDaoTao != null && Object2.MaHinhThucDaoTao != null )
			{
				if (Object1.MaHinhThucDaoTao != Object2.MaHinhThucDaoTao)
					equal = false;
			}
			else if (Object1.MaHinhThucDaoTao == null ^ Object2.MaHinhThucDaoTao == null )
			{
				equal = false;
			}
			if ( Object1.BacDaoTao != null && Object2.BacDaoTao != null )
			{
				if (Object1.BacDaoTao != Object2.BacDaoTao)
					equal = false;
			}
			else if (Object1.BacDaoTao == null ^ Object2.BacDaoTao == null )
			{
				equal = false;
			}
			if ( Object1.NgonNguGiangDay != null && Object2.NgonNguGiangDay != null )
			{
				if (Object1.NgonNguGiangDay != Object2.NgonNguGiangDay)
					equal = false;
			}
			else if (Object1.NgonNguGiangDay == null ^ Object2.NgonNguGiangDay == null )
			{
				equal = false;
			}
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
			if ( Object1.MaNhomMon != null && Object2.MaNhomMon != null )
			{
				if (Object1.MaNhomMon != Object2.MaNhomMon)
					equal = false;
			}
			else if (Object1.MaNhomMon == null ^ Object2.MaNhomMon == null )
			{
				equal = false;
			}
			if ( Object1.NhomMonHoc != null && Object2.NhomMonHoc != null )
			{
				if (Object1.NhomMonHoc != Object2.NhomMonHoc)
					equal = false;
			}
			else if (Object1.NhomMonHoc == null ^ Object2.NhomMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaNgoaiNgu != null && Object2.DonGiaNgoaiNgu != null )
			{
				if (Object1.DonGiaNgoaiNgu != Object2.DonGiaNgoaiNgu)
					equal = false;
			}
			else if (Object1.DonGiaNgoaiNgu == null ^ Object2.DonGiaNgoaiNgu == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaDoAnClc != null && Object2.DonGiaDoAnClc != null )
			{
				if (Object1.DonGiaDoAnClc != Object2.DonGiaDoAnClc)
					equal = false;
			}
			else if (Object1.DonGiaDoAnClc == null ^ Object2.DonGiaDoAnClc == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DonGiaTheoNganhBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DonGiaTheoNganhComparer GetComparer()
        {
            return new DonGiaTheoNganhComparer();
        }
        */

        // Comparer delegates back to DonGiaTheoNganh
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(DonGiaTheoNganh rhs, DonGiaTheoNganhColumn which)
        {
            switch (which)
            {
            	
            	
            	case DonGiaTheoNganhColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.MaQuanLy:
            		return this.MaQuanLy.CompareTo(rhs.MaQuanLy);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.MaLoaiGiangVien:
            		return this.MaLoaiGiangVien.Value.CompareTo(rhs.MaLoaiGiangVien.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.MaHocHam:
            		return this.MaHocHam.Value.CompareTo(rhs.MaHocHam.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.MaHocVi:
            		return this.MaHocVi.Value.CompareTo(rhs.MaHocVi.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.DonGiaCh:
            		return this.DonGiaCh.Value.CompareTo(rhs.DonGiaCh.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.DonGiaTgkc:
            		return this.DonGiaTgkc.Value.CompareTo(rhs.DonGiaTgkc.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.DonGiaTgc:
            		return this.DonGiaTgc.Value.CompareTo(rhs.DonGiaTgc.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.DonGiaHocPhan:
            		return this.DonGiaHocPhan.Value.CompareTo(rhs.DonGiaHocPhan.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.DonGiaLt:
            		return this.DonGiaLt.Value.CompareTo(rhs.DonGiaLt.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.DonGiaTh:
            		return this.DonGiaTh.Value.CompareTo(rhs.DonGiaTh.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.MaDonGiaNhomNganh:
            		return this.MaDonGiaNhomNganh.Value.CompareTo(rhs.MaDonGiaNhomNganh.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.NgayCapNhat:
            		return this.NgayCapNhat.Value.CompareTo(rhs.NgayCapNhat.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.NguoiCapNhat:
            		return this.NguoiCapNhat.CompareTo(rhs.NguoiCapNhat);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.DonGiaClc:
            		return this.DonGiaClc.Value.CompareTo(rhs.DonGiaClc.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.HeSoQuyDoiChatLuong:
            		return this.HeSoQuyDoiChatLuong.Value.CompareTo(rhs.HeSoQuyDoiChatLuong.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.DonGiaTrongChuan:
            		return this.DonGiaTrongChuan.Value.CompareTo(rhs.DonGiaTrongChuan.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.DonGiaNgoaiChuan:
            		return this.DonGiaNgoaiChuan.Value.CompareTo(rhs.DonGiaNgoaiChuan.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.MaHinhThucDaoTao:
            		return this.MaHinhThucDaoTao.CompareTo(rhs.MaHinhThucDaoTao);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.BacDaoTao:
            		return this.BacDaoTao.CompareTo(rhs.BacDaoTao);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.NgonNguGiangDay:
            		return this.NgonNguGiangDay.CompareTo(rhs.NgonNguGiangDay);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.MaNhomMon:
            		return this.MaNhomMon.Value.CompareTo(rhs.MaNhomMon.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.NhomMonHoc:
            		return this.NhomMonHoc.CompareTo(rhs.NhomMonHoc);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.DonGiaNgoaiNgu:
            		return this.DonGiaNgoaiNgu.Value.CompareTo(rhs.DonGiaNgoaiNgu.Value);
            		
            		                 
            	
            	
            	case DonGiaTheoNganhColumn.DonGiaDoAnClc:
            		return this.DonGiaDoAnClc.Value.CompareTo(rhs.DonGiaDoAnClc.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DonGiaTheoNganhKey> Members
		
		// member variable for the EntityId property
		private DonGiaTheoNganhKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DonGiaTheoNganhKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DonGiaTheoNganhKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("DonGiaTheoNganh")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{28}{27}- Id: {0}{27}- MaQuanLy: {1}{27}- MaLoaiGiangVien: {2}{27}- MaHocHam: {3}{27}- MaHocVi: {4}{27}- DonGiaCh: {5}{27}- DonGiaTgkc: {6}{27}- DonGiaTgc: {7}{27}- DonGiaHocPhan: {8}{27}- DonGiaLt: {9}{27}- DonGiaTh: {10}{27}- MaDonGiaNhomNganh: {11}{27}- NgayCapNhat: {12}{27}- NguoiCapNhat: {13}{27}- DonGiaClc: {14}{27}- HeSoQuyDoiChatLuong: {15}{27}- DonGiaTrongChuan: {16}{27}- DonGiaNgoaiChuan: {17}{27}- MaHinhThucDaoTao: {18}{27}- BacDaoTao: {19}{27}- NgonNguGiangDay: {20}{27}- NamHoc: {21}{27}- HocKy: {22}{27}- MaNhomMon: {23}{27}- NhomMonHoc: {24}{27}- DonGiaNgoaiNgu: {25}{27}- DonGiaDoAnClc: {26}{27}{29}", 
				this.Id,
				(this.MaQuanLy == null) ? string.Empty : this.MaQuanLy.ToString(),
				(this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString(),
				(this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString(),
				(this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString(),
				(this.DonGiaCh == null) ? string.Empty : this.DonGiaCh.ToString(),
				(this.DonGiaTgkc == null) ? string.Empty : this.DonGiaTgkc.ToString(),
				(this.DonGiaTgc == null) ? string.Empty : this.DonGiaTgc.ToString(),
				(this.DonGiaHocPhan == null) ? string.Empty : this.DonGiaHocPhan.ToString(),
				(this.DonGiaLt == null) ? string.Empty : this.DonGiaLt.ToString(),
				(this.DonGiaTh == null) ? string.Empty : this.DonGiaTh.ToString(),
				(this.MaDonGiaNhomNganh == null) ? string.Empty : this.MaDonGiaNhomNganh.ToString(),
				(this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString(),
				(this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString(),
				(this.DonGiaClc == null) ? string.Empty : this.DonGiaClc.ToString(),
				(this.HeSoQuyDoiChatLuong == null) ? string.Empty : this.HeSoQuyDoiChatLuong.ToString(),
				(this.DonGiaTrongChuan == null) ? string.Empty : this.DonGiaTrongChuan.ToString(),
				(this.DonGiaNgoaiChuan == null) ? string.Empty : this.DonGiaNgoaiChuan.ToString(),
				(this.MaHinhThucDaoTao == null) ? string.Empty : this.MaHinhThucDaoTao.ToString(),
				(this.BacDaoTao == null) ? string.Empty : this.BacDaoTao.ToString(),
				(this.NgonNguGiangDay == null) ? string.Empty : this.NgonNguGiangDay.ToString(),
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				(this.MaNhomMon == null) ? string.Empty : this.MaNhomMon.ToString(),
				(this.NhomMonHoc == null) ? string.Empty : this.NhomMonHoc.ToString(),
				(this.DonGiaNgoaiNgu == null) ? string.Empty : this.DonGiaNgoaiNgu.ToString(),
				(this.DonGiaDoAnClc == null) ? string.Empty : this.DonGiaDoAnClc.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'DonGiaTheoNganh' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DonGiaTheoNganhEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "DonGiaTheoNganh"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		public System.String MaQuanLy = null;
		
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		public System.Int32? MaLoaiGiangVien = null;
		
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		public System.Int32? MaHocHam = null;
		
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		public System.Int32? MaHocVi = null;
		
		/// <summary>
		/// DonGiaCH : 
		/// </summary>
		public System.Decimal? DonGiaCh = null;
		
		/// <summary>
		/// DonGiaTGKC : 
		/// </summary>
		public System.Decimal? DonGiaTgkc = null;
		
		/// <summary>
		/// DonGiaTGC : 
		/// </summary>
		public System.Decimal? DonGiaTgc = null;
		
		/// <summary>
		/// DonGiaHocPhan : 
		/// </summary>
		public System.Decimal? DonGiaHocPhan = null;
		
		/// <summary>
		/// DonGiaLT : 
		/// </summary>
		public System.Decimal? DonGiaLt = null;
		
		/// <summary>
		/// DonGiaTH : 
		/// </summary>
		public System.Decimal? DonGiaTh = null;
		
		/// <summary>
		/// MaDonGiaNhomNganh : 
		/// </summary>
		public System.Int32? MaDonGiaNhomNganh = null;
		
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		public System.DateTime? NgayCapNhat = null;
		
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		public System.String NguoiCapNhat = null;
		
		/// <summary>
		/// DonGiaClc : 
		/// </summary>
		public System.Decimal? DonGiaClc = null;
		
		/// <summary>
		/// HeSoQuyDoiChatLuong : 
		/// </summary>
		public System.Decimal? HeSoQuyDoiChatLuong = null;
		
		/// <summary>
		/// DonGiaTrongChuan : 
		/// </summary>
		public System.Decimal? DonGiaTrongChuan = null;
		
		/// <summary>
		/// DonGiaNgoaiChuan : 
		/// </summary>
		public System.Decimal? DonGiaNgoaiChuan = null;
		
		/// <summary>
		/// MaHinhThucDaoTao : 
		/// </summary>
		public System.String MaHinhThucDaoTao = null;
		
		/// <summary>
		/// BacDaoTao : 
		/// </summary>
		public System.String BacDaoTao = null;
		
		/// <summary>
		/// NgonNguGiangDay : 
		/// </summary>
		public System.String NgonNguGiangDay = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		
		/// <summary>
		/// MaNhomMon : 
		/// </summary>
		public System.Int32? MaNhomMon = null;
		
		/// <summary>
		/// NhomMonHoc : 
		/// </summary>
		public System.String NhomMonHoc = null;
		
		/// <summary>
		/// DonGiaNgoaiNgu : 
		/// </summary>
		public System.Decimal? DonGiaNgoaiNgu = null;
		
		/// <summary>
		/// DonGiaDoAnClc : 
		/// </summary>
		public System.Decimal? DonGiaDoAnClc = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private HocHam _maHocHamSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="HocHam"/>.
		/// </summary>
		/// <value>The source HocHam for MaHocHam.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual HocHam MaHocHamSource
      	{
            get { return this._maHocHamSource; }
            set { this._maHocHamSource = value; }
      	}
		private HocVi _maHocViSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="HocVi"/>.
		/// </summary>
		/// <value>The source HocVi for MaHocVi.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual HocVi MaHocViSource
      	{
            get { return this._maHocViSource; }
            set { this._maHocViSource = value; }
      	}
		private LoaiGiangVien _maLoaiGiangVienSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="LoaiGiangVien"/>.
		/// </summary>
		/// <value>The source LoaiGiangVien for MaLoaiGiangVien.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual LoaiGiangVien MaLoaiGiangVienSource
      	{
            get { return this._maLoaiGiangVienSource; }
            set { this._maLoaiGiangVienSource = value; }
      	}
		private NgonNguGiangDay _ngonNguGiangDaySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="NgonNguGiangDay"/>.
		/// </summary>
		/// <value>The source NgonNguGiangDay for NgonNguGiangDay.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual NgonNguGiangDay NgonNguGiangDaySource
      	{
            get { return this._ngonNguGiangDaySource; }
            set { this._ngonNguGiangDaySource = value; }
      	}
		private NhomMonHoc _maNhomMonSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="NhomMonHoc"/>.
		/// </summary>
		/// <value>The source NhomMonHoc for MaNhomMon.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual NhomMonHoc MaNhomMonSource
      	{
            get { return this._maNhomMonSource; }
            set { this._maNhomMonSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DonGiaTheoNganhEntityData _tmp = new DonGiaTheoNganhEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.MaQuanLy = this.MaQuanLy;
			_tmp.MaLoaiGiangVien = this.MaLoaiGiangVien;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			_tmp.DonGiaCh = this.DonGiaCh;
			_tmp.DonGiaTgkc = this.DonGiaTgkc;
			_tmp.DonGiaTgc = this.DonGiaTgc;
			_tmp.DonGiaHocPhan = this.DonGiaHocPhan;
			_tmp.DonGiaLt = this.DonGiaLt;
			_tmp.DonGiaTh = this.DonGiaTh;
			_tmp.MaDonGiaNhomNganh = this.MaDonGiaNhomNganh;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.DonGiaClc = this.DonGiaClc;
			_tmp.HeSoQuyDoiChatLuong = this.HeSoQuyDoiChatLuong;
			_tmp.DonGiaTrongChuan = this.DonGiaTrongChuan;
			_tmp.DonGiaNgoaiChuan = this.DonGiaNgoaiChuan;
			_tmp.MaHinhThucDaoTao = this.MaHinhThucDaoTao;
			_tmp.BacDaoTao = this.BacDaoTao;
			_tmp.NgonNguGiangDay = this.NgonNguGiangDay;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaNhomMon = this.MaNhomMon;
			_tmp.NhomMonHoc = this.NhomMonHoc;
			_tmp.DonGiaNgoaiNgu = this.DonGiaNgoaiNgu;
			_tmp.DonGiaDoAnClc = this.DonGiaDoAnClc;
			
			#region Source Parent Composite Entities
			if (this.MaHocHamSource != null)
				_tmp.MaHocHamSource = MakeCopyOf(this.MaHocHamSource) as HocHam;
			if (this.MaHocViSource != null)
				_tmp.MaHocViSource = MakeCopyOf(this.MaHocViSource) as HocVi;
			if (this.MaLoaiGiangVienSource != null)
				_tmp.MaLoaiGiangVienSource = MakeCopyOf(this.MaLoaiGiangVienSource) as LoaiGiangVien;
			if (this.NgonNguGiangDaySource != null)
				_tmp.NgonNguGiangDaySource = MakeCopyOf(this.NgonNguGiangDaySource) as NgonNguGiangDay;
			if (this.MaNhomMonSource != null)
				_tmp.MaNhomMonSource = MakeCopyOf(this.MaNhomMonSource) as NhomMonHoc;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DonGiaTheoNganhEntityData _tmp = new DonGiaTheoNganhEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.MaQuanLy = this.MaQuanLy;
			_tmp.MaLoaiGiangVien = this.MaLoaiGiangVien;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			_tmp.DonGiaCh = this.DonGiaCh;
			_tmp.DonGiaTgkc = this.DonGiaTgkc;
			_tmp.DonGiaTgc = this.DonGiaTgc;
			_tmp.DonGiaHocPhan = this.DonGiaHocPhan;
			_tmp.DonGiaLt = this.DonGiaLt;
			_tmp.DonGiaTh = this.DonGiaTh;
			_tmp.MaDonGiaNhomNganh = this.MaDonGiaNhomNganh;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.DonGiaClc = this.DonGiaClc;
			_tmp.HeSoQuyDoiChatLuong = this.HeSoQuyDoiChatLuong;
			_tmp.DonGiaTrongChuan = this.DonGiaTrongChuan;
			_tmp.DonGiaNgoaiChuan = this.DonGiaNgoaiChuan;
			_tmp.MaHinhThucDaoTao = this.MaHinhThucDaoTao;
			_tmp.BacDaoTao = this.BacDaoTao;
			_tmp.NgonNguGiangDay = this.NgonNguGiangDay;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaNhomMon = this.MaNhomMon;
			_tmp.NhomMonHoc = this.NhomMonHoc;
			_tmp.DonGiaNgoaiNgu = this.DonGiaNgoaiNgu;
			_tmp.DonGiaDoAnClc = this.DonGiaDoAnClc;
			
			#region Source Parent Composite Entities
			if (this.MaHocHamSource != null && existingCopies.Contains(this.MaHocHamSource))
				_tmp.MaHocHamSource = existingCopies[this.MaHocHamSource] as HocHam;
			else
				_tmp.MaHocHamSource = MakeCopyOf(this.MaHocHamSource, existingCopies) as HocHam;
			if (this.MaHocViSource != null && existingCopies.Contains(this.MaHocViSource))
				_tmp.MaHocViSource = existingCopies[this.MaHocViSource] as HocVi;
			else
				_tmp.MaHocViSource = MakeCopyOf(this.MaHocViSource, existingCopies) as HocVi;
			if (this.MaLoaiGiangVienSource != null && existingCopies.Contains(this.MaLoaiGiangVienSource))
				_tmp.MaLoaiGiangVienSource = existingCopies[this.MaLoaiGiangVienSource] as LoaiGiangVien;
			else
				_tmp.MaLoaiGiangVienSource = MakeCopyOf(this.MaLoaiGiangVienSource, existingCopies) as LoaiGiangVien;
			if (this.NgonNguGiangDaySource != null && existingCopies.Contains(this.NgonNguGiangDaySource))
				_tmp.NgonNguGiangDaySource = existingCopies[this.NgonNguGiangDaySource] as NgonNguGiangDay;
			else
				_tmp.NgonNguGiangDaySource = MakeCopyOf(this.NgonNguGiangDaySource, existingCopies) as NgonNguGiangDay;
			if (this.MaNhomMonSource != null && existingCopies.Contains(this.MaNhomMonSource))
				_tmp.MaNhomMonSource = existingCopies[this.MaNhomMonSource] as NhomMonHoc;
			else
				_tmp.MaNhomMonSource = MakeCopyOf(this.MaNhomMonSource, existingCopies) as NhomMonHoc;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DonGiaTheoNganhColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DonGiaTheoNganhColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DonGiaTheoNganhColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DonGiaTheoNganhColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DonGiaTheoNganhColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DonGiaTheoNganhColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				DonGiaTheoNganhEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DonGiaTheoNganhEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DonGiaTheoNganhColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DonGiaTheoNganhColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DonGiaTheoNganhEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DonGiaTheoNganhEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DonGiaTheoNganhEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="DonGiaTheoNganh"/> object.
	/// </remarks>
	public class DonGiaTheoNganhEventArgs : System.EventArgs
	{
		private DonGiaTheoNganhColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DonGiaTheoNganhEventArgs class.
		///</summary>
		public DonGiaTheoNganhEventArgs(DonGiaTheoNganhColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DonGiaTheoNganhEventArgs class.
		///</summary>
		public DonGiaTheoNganhEventArgs(DonGiaTheoNganhColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DonGiaTheoNganhColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DonGiaTheoNganhColumn" />
		public DonGiaTheoNganhColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all DonGiaTheoNganh related events.
	///</summary>
	public delegate void DonGiaTheoNganhEventHandler(object sender, DonGiaTheoNganhEventArgs e);
	
	#region DonGiaTheoNganhComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DonGiaTheoNganhComparer : System.Collections.Generic.IComparer<DonGiaTheoNganh>
	{
		DonGiaTheoNganhColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DonGiaTheoNganhComparer"/> class.
        /// </summary>
		public DonGiaTheoNganhComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DonGiaTheoNganhComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DonGiaTheoNganhComparer(DonGiaTheoNganhColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="DonGiaTheoNganh"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="DonGiaTheoNganh"/> to compare.</param>
        /// <param name="b">The second <c>DonGiaTheoNganh</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(DonGiaTheoNganh a, DonGiaTheoNganh b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(DonGiaTheoNganh entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(DonGiaTheoNganh a, DonGiaTheoNganh b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DonGiaTheoNganhColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DonGiaTheoNganhKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="DonGiaTheoNganh"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DonGiaTheoNganhKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DonGiaTheoNganhKey class.
		/// </summary>
		public DonGiaTheoNganhKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DonGiaTheoNganhKey class.
		/// </summary>
		public DonGiaTheoNganhKey(DonGiaTheoNganhBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DonGiaTheoNganhKey class.
		/// </summary>
		public DonGiaTheoNganhKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DonGiaTheoNganhBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DonGiaTheoNganhBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DonGiaTheoNganhColumn Enum
	
	/// <summary>
	/// Enumerate the DonGiaTheoNganh columns.
	/// </summary>
	[Serializable]
	public enum DonGiaTheoNganhColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		[EnumTextValue("Ma Quan Ly")]
		[ColumnEnum("MaQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaQuanLy = 2,
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Loai Giang Vien")]
		[ColumnEnum("MaLoaiGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaLoaiGiangVien = 3,
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		[EnumTextValue("Ma Hoc Ham")]
		[ColumnEnum("MaHocHam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocHam = 4,
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		[EnumTextValue("Ma Hoc Vi")]
		[ColumnEnum("MaHocVi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocVi = 5,
		/// <summary>
		/// DonGiaCh : 
		/// </summary>
		[EnumTextValue("Don Gia Ch")]
		[ColumnEnum("DonGiaCH", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGiaCh = 6,
		/// <summary>
		/// DonGiaTgkc : 
		/// </summary>
		[EnumTextValue("Don Gia Tgkc")]
		[ColumnEnum("DonGiaTGKC", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGiaTgkc = 7,
		/// <summary>
		/// DonGiaTgc : 
		/// </summary>
		[EnumTextValue("Don Gia Tgc")]
		[ColumnEnum("DonGiaTGC", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGiaTgc = 8,
		/// <summary>
		/// DonGiaHocPhan : 
		/// </summary>
		[EnumTextValue("Don Gia Hoc Phan")]
		[ColumnEnum("DonGiaHocPhan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGiaHocPhan = 9,
		/// <summary>
		/// DonGiaLt : 
		/// </summary>
		[EnumTextValue("Don Gia Lt")]
		[ColumnEnum("DonGiaLT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGiaLt = 10,
		/// <summary>
		/// DonGiaTh : 
		/// </summary>
		[EnumTextValue("Don Gia Th")]
		[ColumnEnum("DonGiaTH", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGiaTh = 11,
		/// <summary>
		/// MaDonGiaNhomNganh : 
		/// </summary>
		[EnumTextValue("Ma Don Gia Nhom Nganh")]
		[ColumnEnum("MaDonGiaNhomNganh", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaDonGiaNhomNganh = 12,
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		[EnumTextValue("Ngay Cap Nhat")]
		[ColumnEnum("NgayCapNhat", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayCapNhat = 13,
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		[EnumTextValue("Nguoi Cap Nhat")]
		[ColumnEnum("NguoiCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NguoiCapNhat = 14,
		/// <summary>
		/// DonGiaClc : 
		/// </summary>
		[EnumTextValue("Don Gia Clc")]
		[ColumnEnum("DonGiaClc", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGiaClc = 15,
		/// <summary>
		/// HeSoQuyDoiChatLuong : 
		/// </summary>
		[EnumTextValue("He So Quy Doi Chat Luong")]
		[ColumnEnum("HeSoQuyDoiChatLuong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoQuyDoiChatLuong = 16,
		/// <summary>
		/// DonGiaTrongChuan : 
		/// </summary>
		[EnumTextValue("Don Gia Trong Chuan")]
		[ColumnEnum("DonGiaTrongChuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGiaTrongChuan = 17,
		/// <summary>
		/// DonGiaNgoaiChuan : 
		/// </summary>
		[EnumTextValue("Don Gia Ngoai Chuan")]
		[ColumnEnum("DonGiaNgoaiChuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGiaNgoaiChuan = 18,
		/// <summary>
		/// MaHinhThucDaoTao : 
		/// </summary>
		[EnumTextValue("Ma Hinh Thuc Dao Tao")]
		[ColumnEnum("MaHinhThucDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaHinhThucDaoTao = 19,
		/// <summary>
		/// BacDaoTao : 
		/// </summary>
		[EnumTextValue("Bac Dao Tao")]
		[ColumnEnum("BacDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		BacDaoTao = 20,
		/// <summary>
		/// NgonNguGiangDay : 
		/// </summary>
		[EnumTextValue("Ngon Ngu Giang Day")]
		[ColumnEnum("NgonNguGiangDay", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NgonNguGiangDay = 21,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 22,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy = 23,
		/// <summary>
		/// MaNhomMon : 
		/// </summary>
		[EnumTextValue("Ma Nhom Mon")]
		[ColumnEnum("MaNhomMon", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaNhomMon = 24,
		/// <summary>
		/// NhomMonHoc : 
		/// </summary>
		[EnumTextValue("Nhom Mon Hoc")]
		[ColumnEnum("NhomMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		NhomMonHoc = 25,
		/// <summary>
		/// DonGiaNgoaiNgu : 
		/// </summary>
		[EnumTextValue("Don Gia Ngoai Ngu")]
		[ColumnEnum("DonGiaNgoaiNgu", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGiaNgoaiNgu = 26,
		/// <summary>
		/// DonGiaDoAnClc : 
		/// </summary>
		[EnumTextValue("Don Gia Do An Clc")]
		[ColumnEnum("DonGiaDoAnClc", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGiaDoAnClc = 27
	}//End enum

	#endregion DonGiaTheoNganhColumn Enum

} // end namespace
