
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file TieuDe.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'TieuDe' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class TieuDeBase : EntityBase, ITieuDe, IEntityId<TieuDeKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private TieuDeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private TieuDeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private TieuDeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<TieuDe> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TieuDeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TieuDeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="TieuDeBase"/> instance.
		///</summary>
		public TieuDeBase()
		{
			this.entityData = new TieuDeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="TieuDeBase"/> instance.
		///</summary>
		///<param name="_idFileName"></param>
		///<param name="_idTitleVn"></param>
		///<param name="_idTitleEn"></param>
		///<param name="_idSize"></param>
		///<param name="_stt"></param>
		///<param name="_maTruong"></param>
		///<param name="_trangThai"></param>
		///<param name="_idFrom"></param>
		///<param name="_idAn"></param>
		///<param name="_idFormatField"></param>
		///<param name="_idHideField"></param>
		///<param name="_idSummaryField"></param>
		///<param name="_idReadOnlyField"></param>
		public TieuDeBase(System.String _idFileName, System.String _idTitleVn, System.String _idTitleEn, 
			System.Int32? _idSize, System.Int32? _stt, System.String _maTruong, System.Boolean? _trangThai, System.String _idFrom, 
			System.Int32? _idAn, System.String _idFormatField, System.String _idHideField, System.String _idSummaryField, 
			System.String _idReadOnlyField)
		{
			this.entityData = new TieuDeEntityData();
			this.backupData = null;

			this.IdFileName = _idFileName;
			this.IdTitleVn = _idTitleVn;
			this.IdTitleEn = _idTitleEn;
			this.IdSize = _idSize;
			this.Stt = _stt;
			this.MaTruong = _maTruong;
			this.TrangThai = _trangThai;
			this.IdFrom = _idFrom;
			this.IdAn = _idAn;
			this.IdFormatField = _idFormatField;
			this.IdHideField = _idHideField;
			this.IdSummaryField = _idSummaryField;
			this.IdReadOnlyField = _idReadOnlyField;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="TieuDe"/> instance.
		///</summary>
		///<param name="_idFileName"></param>
		///<param name="_idTitleVn"></param>
		///<param name="_idTitleEn"></param>
		///<param name="_idSize"></param>
		///<param name="_stt"></param>
		///<param name="_maTruong"></param>
		///<param name="_trangThai"></param>
		///<param name="_idFrom"></param>
		///<param name="_idAn"></param>
		///<param name="_idFormatField"></param>
		///<param name="_idHideField"></param>
		///<param name="_idSummaryField"></param>
		///<param name="_idReadOnlyField"></param>
		public static TieuDe CreateTieuDe(System.String _idFileName, System.String _idTitleVn, System.String _idTitleEn, 
			System.Int32? _idSize, System.Int32? _stt, System.String _maTruong, System.Boolean? _trangThai, System.String _idFrom, 
			System.Int32? _idAn, System.String _idFormatField, System.String _idHideField, System.String _idSummaryField, 
			System.String _idReadOnlyField)
		{
			TieuDe newTieuDe = new TieuDe();
			newTieuDe.IdFileName = _idFileName;
			newTieuDe.IdTitleVn = _idTitleVn;
			newTieuDe.IdTitleEn = _idTitleEn;
			newTieuDe.IdSize = _idSize;
			newTieuDe.Stt = _stt;
			newTieuDe.MaTruong = _maTruong;
			newTieuDe.TrangThai = _trangThai;
			newTieuDe.IdFrom = _idFrom;
			newTieuDe.IdAn = _idAn;
			newTieuDe.IdFormatField = _idFormatField;
			newTieuDe.IdHideField = _idHideField;
			newTieuDe.IdSummaryField = _idSummaryField;
			newTieuDe.IdReadOnlyField = _idReadOnlyField;
			return newTieuDe;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Id is required")]




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(TieuDeColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TieuDeColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdFileName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String IdFileName
		{
			get
			{
				return this.entityData.IdFileName; 
			}
			
			set
			{
				if (this.entityData.IdFileName == value)
					return;
				
                OnPropertyChanging("IdFileName");                    
				OnColumnChanging(TieuDeColumn.IdFileName, this.entityData.IdFileName);
				this.entityData.IdFileName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TieuDeColumn.IdFileName, this.entityData.IdFileName);
				OnPropertyChanged("IdFileName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdTitleVn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String IdTitleVn
		{
			get
			{
				return this.entityData.IdTitleVn; 
			}
			
			set
			{
				if (this.entityData.IdTitleVn == value)
					return;
				
                OnPropertyChanging("IdTitleVn");                    
				OnColumnChanging(TieuDeColumn.IdTitleVn, this.entityData.IdTitleVn);
				this.entityData.IdTitleVn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TieuDeColumn.IdTitleVn, this.entityData.IdTitleVn);
				OnPropertyChanged("IdTitleVn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdTitleEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String IdTitleEn
		{
			get
			{
				return this.entityData.IdTitleEn; 
			}
			
			set
			{
				if (this.entityData.IdTitleEn == value)
					return;
				
                OnPropertyChanging("IdTitleEn");                    
				OnColumnChanging(TieuDeColumn.IdTitleEn, this.entityData.IdTitleEn);
				this.entityData.IdTitleEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TieuDeColumn.IdTitleEn, this.entityData.IdTitleEn);
				OnPropertyChanged("IdTitleEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdSize property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? IdSize
		{
			get
			{
				return this.entityData.IdSize; 
			}
			
			set
			{
				if (this.entityData.IdSize == value)
					return;
				
                OnPropertyChanging("IdSize");                    
				OnColumnChanging(TieuDeColumn.IdSize, this.entityData.IdSize);
				this.entityData.IdSize = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TieuDeColumn.IdSize, this.entityData.IdSize);
				OnPropertyChanged("IdSize");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Stt property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Stt
		{
			get
			{
				return this.entityData.Stt; 
			}
			
			set
			{
				if (this.entityData.Stt == value)
					return;
				
                OnPropertyChanging("Stt");                    
				OnColumnChanging(TieuDeColumn.Stt, this.entityData.Stt);
				this.entityData.Stt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TieuDeColumn.Stt, this.entityData.Stt);
				OnPropertyChanged("Stt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaTruong property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaTruong
		{
			get
			{
				return this.entityData.MaTruong; 
			}
			
			set
			{
				if (this.entityData.MaTruong == value)
					return;
				
                OnPropertyChanging("MaTruong");                    
				OnColumnChanging(TieuDeColumn.MaTruong, this.entityData.MaTruong);
				this.entityData.MaTruong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TieuDeColumn.MaTruong, this.entityData.MaTruong);
				OnPropertyChanged("MaTruong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrangThai property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? TrangThai
		{
			get
			{
				return this.entityData.TrangThai; 
			}
			
			set
			{
				if (this.entityData.TrangThai == value)
					return;
				
                OnPropertyChanging("TrangThai");                    
				OnColumnChanging(TieuDeColumn.TrangThai, this.entityData.TrangThai);
				this.entityData.TrangThai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TieuDeColumn.TrangThai, this.entityData.TrangThai);
				OnPropertyChanged("TrangThai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdFrom property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String IdFrom
		{
			get
			{
				return this.entityData.IdFrom; 
			}
			
			set
			{
				if (this.entityData.IdFrom == value)
					return;
				
                OnPropertyChanging("IdFrom");                    
				OnColumnChanging(TieuDeColumn.IdFrom, this.entityData.IdFrom);
				this.entityData.IdFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TieuDeColumn.IdFrom, this.entityData.IdFrom);
				OnPropertyChanged("IdFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdAn property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? IdAn
		{
			get
			{
				return this.entityData.IdAn; 
			}
			
			set
			{
				if (this.entityData.IdAn == value)
					return;
				
                OnPropertyChanging("IdAn");                    
				OnColumnChanging(TieuDeColumn.IdAn, this.entityData.IdAn);
				this.entityData.IdAn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TieuDeColumn.IdAn, this.entityData.IdAn);
				OnPropertyChanged("IdAn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdFormatField property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String IdFormatField
		{
			get
			{
				return this.entityData.IdFormatField; 
			}
			
			set
			{
				if (this.entityData.IdFormatField == value)
					return;
				
                OnPropertyChanging("IdFormatField");                    
				OnColumnChanging(TieuDeColumn.IdFormatField, this.entityData.IdFormatField);
				this.entityData.IdFormatField = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TieuDeColumn.IdFormatField, this.entityData.IdFormatField);
				OnPropertyChanged("IdFormatField");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdHideField property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String IdHideField
		{
			get
			{
				return this.entityData.IdHideField; 
			}
			
			set
			{
				if (this.entityData.IdHideField == value)
					return;
				
                OnPropertyChanging("IdHideField");                    
				OnColumnChanging(TieuDeColumn.IdHideField, this.entityData.IdHideField);
				this.entityData.IdHideField = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TieuDeColumn.IdHideField, this.entityData.IdHideField);
				OnPropertyChanged("IdHideField");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdSummaryField property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String IdSummaryField
		{
			get
			{
				return this.entityData.IdSummaryField; 
			}
			
			set
			{
				if (this.entityData.IdSummaryField == value)
					return;
				
                OnPropertyChanging("IdSummaryField");                    
				OnColumnChanging(TieuDeColumn.IdSummaryField, this.entityData.IdSummaryField);
				this.entityData.IdSummaryField = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TieuDeColumn.IdSummaryField, this.entityData.IdSummaryField);
				OnPropertyChanged("IdSummaryField");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdReadOnlyField property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String IdReadOnlyField
		{
			get
			{
				return this.entityData.IdReadOnlyField; 
			}
			
			set
			{
				if (this.entityData.IdReadOnlyField == value)
					return;
				
                OnPropertyChanging("IdReadOnlyField");                    
				OnColumnChanging(TieuDeColumn.IdReadOnlyField, this.entityData.IdReadOnlyField);
				this.entityData.IdReadOnlyField = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TieuDeColumn.IdReadOnlyField, this.entityData.IdReadOnlyField);
				OnPropertyChanged("IdReadOnlyField");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("IdFileName", "Id File Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("IdTitleVn", "Id Title Vn", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("IdTitleEn", "Id Title En", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaTruong", "Ma Truong", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("IdFrom", "Id From", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "TieuDe"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "IdFileName", "IdTitleVN", "IdTitleEN", "IdSize", "STT", "MaTruong", "TrangThai", "IDFrom", "IdAn", "IdFormatField", "IdHideField", "IdSummaryField", "IdReadOnlyField"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as TieuDeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (TieuDe) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<TieuDe>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as TieuDe);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed TieuDe Entity 
		///</summary>
		protected virtual TieuDe Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			TieuDe copy = new TieuDe();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.IdFileName = this.IdFileName;
				copy.IdTitleVn = this.IdTitleVn;
				copy.IdTitleEn = this.IdTitleEn;
				copy.IdSize = this.IdSize;
				copy.Stt = this.Stt;
				copy.MaTruong = this.MaTruong;
				copy.TrangThai = this.TrangThai;
				copy.IdFrom = this.IdFrom;
				copy.IdAn = this.IdAn;
				copy.IdFormatField = this.IdFormatField;
				copy.IdHideField = this.IdHideField;
				copy.IdSummaryField = this.IdSummaryField;
				copy.IdReadOnlyField = this.IdReadOnlyField;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed TieuDe Entity 
		///</summary>
		public virtual TieuDe Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed TieuDe Entity which is a deep copy of the current entity.
		///</summary>
		public virtual TieuDe DeepCopy()
		{
			return EntityHelper.Clone<TieuDe>(this as TieuDe);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as TieuDeEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new TieuDeEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as TieuDeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(TieuDeColumn column)
		{
			switch(column)
			{
					case TieuDeColumn.Id:
					return entityData.Id != _originalData.Id;
					case TieuDeColumn.IdFileName:
					return entityData.IdFileName != _originalData.IdFileName;
					case TieuDeColumn.IdTitleVn:
					return entityData.IdTitleVn != _originalData.IdTitleVn;
					case TieuDeColumn.IdTitleEn:
					return entityData.IdTitleEn != _originalData.IdTitleEn;
					case TieuDeColumn.IdSize:
					return entityData.IdSize != _originalData.IdSize;
					case TieuDeColumn.Stt:
					return entityData.Stt != _originalData.Stt;
					case TieuDeColumn.MaTruong:
					return entityData.MaTruong != _originalData.MaTruong;
					case TieuDeColumn.TrangThai:
					return entityData.TrangThai != _originalData.TrangThai;
					case TieuDeColumn.IdFrom:
					return entityData.IdFrom != _originalData.IdFrom;
					case TieuDeColumn.IdAn:
					return entityData.IdAn != _originalData.IdAn;
					case TieuDeColumn.IdFormatField:
					return entityData.IdFormatField != _originalData.IdFormatField;
					case TieuDeColumn.IdHideField:
					return entityData.IdHideField != _originalData.IdHideField;
					case TieuDeColumn.IdSummaryField:
					return entityData.IdSummaryField != _originalData.IdSummaryField;
					case TieuDeColumn.IdReadOnlyField:
					return entityData.IdReadOnlyField != _originalData.IdReadOnlyField;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< TieuDeColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.IdFileName != _originalData.IdFileName;
			result = result || entityData.IdTitleVn != _originalData.IdTitleVn;
			result = result || entityData.IdTitleEn != _originalData.IdTitleEn;
			result = result || entityData.IdSize != _originalData.IdSize;
			result = result || entityData.Stt != _originalData.Stt;
			result = result || entityData.MaTruong != _originalData.MaTruong;
			result = result || entityData.TrangThai != _originalData.TrangThai;
			result = result || entityData.IdFrom != _originalData.IdFrom;
			result = result || entityData.IdAn != _originalData.IdAn;
			result = result || entityData.IdFormatField != _originalData.IdFormatField;
			result = result || entityData.IdHideField != _originalData.IdHideField;
			result = result || entityData.IdSummaryField != _originalData.IdSummaryField;
			result = result || entityData.IdReadOnlyField != _originalData.IdReadOnlyField;
			return result;
		}	
		
		///<summary>
		///  Returns a TieuDe Entity with the original data.
		///</summary>
		public TieuDe GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateTieuDe(
				_originalData.IdFileName,
				_originalData.IdTitleVn,
				_originalData.IdTitleEn,
				_originalData.IdSize,
				_originalData.Stt,
				_originalData.MaTruong,
				_originalData.TrangThai,
				_originalData.IdFrom,
				_originalData.IdAn,
				_originalData.IdFormatField,
				_originalData.IdHideField,
				_originalData.IdSummaryField,
				_originalData.IdReadOnlyField
				);
				
			return (TieuDe)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="TieuDeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is TieuDeBase)
				return ValueEquals(this, (TieuDeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="TieuDeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.IdFileName == null) ? string.Empty : this.IdFileName.ToString()).GetHashCode() ^ 
					((this.IdTitleVn == null) ? string.Empty : this.IdTitleVn.ToString()).GetHashCode() ^ 
					((this.IdTitleEn == null) ? string.Empty : this.IdTitleEn.ToString()).GetHashCode() ^ 
					((this.IdSize == null) ? string.Empty : this.IdSize.ToString()).GetHashCode() ^ 
					((this.Stt == null) ? string.Empty : this.Stt.ToString()).GetHashCode() ^ 
					((this.MaTruong == null) ? string.Empty : this.MaTruong.ToString()).GetHashCode() ^ 
					((this.TrangThai == null) ? string.Empty : this.TrangThai.ToString()).GetHashCode() ^ 
					((this.IdFrom == null) ? string.Empty : this.IdFrom.ToString()).GetHashCode() ^ 
					((this.IdAn == null) ? string.Empty : this.IdAn.ToString()).GetHashCode() ^ 
					((this.IdFormatField == null) ? string.Empty : this.IdFormatField.ToString()).GetHashCode() ^ 
					((this.IdHideField == null) ? string.Empty : this.IdHideField.ToString()).GetHashCode() ^ 
					((this.IdSummaryField == null) ? string.Empty : this.IdSummaryField.ToString()).GetHashCode() ^ 
					((this.IdReadOnlyField == null) ? string.Empty : this.IdReadOnlyField.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="TieuDeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(TieuDeBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="TieuDeBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="TieuDeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="TieuDeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(TieuDeBase Object1, TieuDeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.IdFileName != null && Object2.IdFileName != null )
			{
				if (Object1.IdFileName != Object2.IdFileName)
					equal = false;
			}
			else if (Object1.IdFileName == null ^ Object2.IdFileName == null )
			{
				equal = false;
			}
			if ( Object1.IdTitleVn != null && Object2.IdTitleVn != null )
			{
				if (Object1.IdTitleVn != Object2.IdTitleVn)
					equal = false;
			}
			else if (Object1.IdTitleVn == null ^ Object2.IdTitleVn == null )
			{
				equal = false;
			}
			if ( Object1.IdTitleEn != null && Object2.IdTitleEn != null )
			{
				if (Object1.IdTitleEn != Object2.IdTitleEn)
					equal = false;
			}
			else if (Object1.IdTitleEn == null ^ Object2.IdTitleEn == null )
			{
				equal = false;
			}
			if ( Object1.IdSize != null && Object2.IdSize != null )
			{
				if (Object1.IdSize != Object2.IdSize)
					equal = false;
			}
			else if (Object1.IdSize == null ^ Object2.IdSize == null )
			{
				equal = false;
			}
			if ( Object1.Stt != null && Object2.Stt != null )
			{
				if (Object1.Stt != Object2.Stt)
					equal = false;
			}
			else if (Object1.Stt == null ^ Object2.Stt == null )
			{
				equal = false;
			}
			if ( Object1.MaTruong != null && Object2.MaTruong != null )
			{
				if (Object1.MaTruong != Object2.MaTruong)
					equal = false;
			}
			else if (Object1.MaTruong == null ^ Object2.MaTruong == null )
			{
				equal = false;
			}
			if ( Object1.TrangThai != null && Object2.TrangThai != null )
			{
				if (Object1.TrangThai != Object2.TrangThai)
					equal = false;
			}
			else if (Object1.TrangThai == null ^ Object2.TrangThai == null )
			{
				equal = false;
			}
			if ( Object1.IdFrom != null && Object2.IdFrom != null )
			{
				if (Object1.IdFrom != Object2.IdFrom)
					equal = false;
			}
			else if (Object1.IdFrom == null ^ Object2.IdFrom == null )
			{
				equal = false;
			}
			if ( Object1.IdAn != null && Object2.IdAn != null )
			{
				if (Object1.IdAn != Object2.IdAn)
					equal = false;
			}
			else if (Object1.IdAn == null ^ Object2.IdAn == null )
			{
				equal = false;
			}
			if ( Object1.IdFormatField != null && Object2.IdFormatField != null )
			{
				if (Object1.IdFormatField != Object2.IdFormatField)
					equal = false;
			}
			else if (Object1.IdFormatField == null ^ Object2.IdFormatField == null )
			{
				equal = false;
			}
			if ( Object1.IdHideField != null && Object2.IdHideField != null )
			{
				if (Object1.IdHideField != Object2.IdHideField)
					equal = false;
			}
			else if (Object1.IdHideField == null ^ Object2.IdHideField == null )
			{
				equal = false;
			}
			if ( Object1.IdSummaryField != null && Object2.IdSummaryField != null )
			{
				if (Object1.IdSummaryField != Object2.IdSummaryField)
					equal = false;
			}
			else if (Object1.IdSummaryField == null ^ Object2.IdSummaryField == null )
			{
				equal = false;
			}
			if ( Object1.IdReadOnlyField != null && Object2.IdReadOnlyField != null )
			{
				if (Object1.IdReadOnlyField != Object2.IdReadOnlyField)
					equal = false;
			}
			else if (Object1.IdReadOnlyField == null ^ Object2.IdReadOnlyField == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((TieuDeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static TieuDeComparer GetComparer()
        {
            return new TieuDeComparer();
        }
        */

        // Comparer delegates back to TieuDe
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(TieuDe rhs, TieuDeColumn which)
        {
            switch (which)
            {
            	
            	
            	case TieuDeColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case TieuDeColumn.IdFileName:
            		return this.IdFileName.CompareTo(rhs.IdFileName);
            		
            		                 
            	
            	
            	case TieuDeColumn.IdTitleVn:
            		return this.IdTitleVn.CompareTo(rhs.IdTitleVn);
            		
            		                 
            	
            	
            	case TieuDeColumn.IdTitleEn:
            		return this.IdTitleEn.CompareTo(rhs.IdTitleEn);
            		
            		                 
            	
            	
            	case TieuDeColumn.IdSize:
            		return this.IdSize.Value.CompareTo(rhs.IdSize.Value);
            		
            		                 
            	
            	
            	case TieuDeColumn.Stt:
            		return this.Stt.Value.CompareTo(rhs.Stt.Value);
            		
            		                 
            	
            	
            	case TieuDeColumn.MaTruong:
            		return this.MaTruong.CompareTo(rhs.MaTruong);
            		
            		                 
            	
            	
            	case TieuDeColumn.TrangThai:
            		return this.TrangThai.Value.CompareTo(rhs.TrangThai.Value);
            		
            		                 
            	
            	
            	case TieuDeColumn.IdFrom:
            		return this.IdFrom.CompareTo(rhs.IdFrom);
            		
            		                 
            	
            	
            	case TieuDeColumn.IdAn:
            		return this.IdAn.Value.CompareTo(rhs.IdAn.Value);
            		
            		                 
            	
            	
            	case TieuDeColumn.IdFormatField:
            		return this.IdFormatField.CompareTo(rhs.IdFormatField);
            		
            		                 
            	
            	
            	case TieuDeColumn.IdHideField:
            		return this.IdHideField.CompareTo(rhs.IdHideField);
            		
            		                 
            	
            	
            	case TieuDeColumn.IdSummaryField:
            		return this.IdSummaryField.CompareTo(rhs.IdSummaryField);
            		
            		                 
            	
            	
            	case TieuDeColumn.IdReadOnlyField:
            		return this.IdReadOnlyField.CompareTo(rhs.IdReadOnlyField);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<TieuDeKey> Members
		
		// member variable for the EntityId property
		private TieuDeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual TieuDeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new TieuDeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("TieuDe")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- Id: {0}{14}- IdFileName: {1}{14}- IdTitleVn: {2}{14}- IdTitleEn: {3}{14}- IdSize: {4}{14}- Stt: {5}{14}- MaTruong: {6}{14}- TrangThai: {7}{14}- IdFrom: {8}{14}- IdAn: {9}{14}- IdFormatField: {10}{14}- IdHideField: {11}{14}- IdSummaryField: {12}{14}- IdReadOnlyField: {13}{14}{16}", 
				this.Id,
				(this.IdFileName == null) ? string.Empty : this.IdFileName.ToString(),
				(this.IdTitleVn == null) ? string.Empty : this.IdTitleVn.ToString(),
				(this.IdTitleEn == null) ? string.Empty : this.IdTitleEn.ToString(),
				(this.IdSize == null) ? string.Empty : this.IdSize.ToString(),
				(this.Stt == null) ? string.Empty : this.Stt.ToString(),
				(this.MaTruong == null) ? string.Empty : this.MaTruong.ToString(),
				(this.TrangThai == null) ? string.Empty : this.TrangThai.ToString(),
				(this.IdFrom == null) ? string.Empty : this.IdFrom.ToString(),
				(this.IdAn == null) ? string.Empty : this.IdAn.ToString(),
				(this.IdFormatField == null) ? string.Empty : this.IdFormatField.ToString(),
				(this.IdHideField == null) ? string.Empty : this.IdHideField.ToString(),
				(this.IdSummaryField == null) ? string.Empty : this.IdSummaryField.ToString(),
				(this.IdReadOnlyField == null) ? string.Empty : this.IdReadOnlyField.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'TieuDe' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class TieuDeEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "TieuDe"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// IdFileName : 
		/// </summary>
		public System.String IdFileName = null;
		
		/// <summary>
		/// IdTitleVN : 
		/// </summary>
		public System.String IdTitleVn = null;
		
		/// <summary>
		/// IdTitleEN : 
		/// </summary>
		public System.String IdTitleEn = null;
		
		/// <summary>
		/// IdSize : 
		/// </summary>
		public System.Int32? IdSize = null;
		
		/// <summary>
		/// STT : 
		/// </summary>
		public System.Int32? Stt = null;
		
		/// <summary>
		/// MaTruong : 
		/// </summary>
		public System.String MaTruong = null;
		
		/// <summary>
		/// TrangThai : 
		/// </summary>
		public System.Boolean? TrangThai = null;
		
		/// <summary>
		/// IDFrom : 
		/// </summary>
		public System.String IdFrom = null;
		
		/// <summary>
		/// IdAn : 
		/// </summary>
		public System.Int32? IdAn = null;
		
		/// <summary>
		/// IdFormatField : 
		/// </summary>
		public System.String IdFormatField = null;
		
		/// <summary>
		/// IdHideField : 
		/// </summary>
		public System.String IdHideField = null;
		
		/// <summary>
		/// IdSummaryField : 
		/// </summary>
		public System.String IdSummaryField = null;
		
		/// <summary>
		/// IdReadOnlyField : 
		/// </summary>
		public System.String IdReadOnlyField = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			TieuDeEntityData _tmp = new TieuDeEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.IdFileName = this.IdFileName;
			_tmp.IdTitleVn = this.IdTitleVn;
			_tmp.IdTitleEn = this.IdTitleEn;
			_tmp.IdSize = this.IdSize;
			_tmp.Stt = this.Stt;
			_tmp.MaTruong = this.MaTruong;
			_tmp.TrangThai = this.TrangThai;
			_tmp.IdFrom = this.IdFrom;
			_tmp.IdAn = this.IdAn;
			_tmp.IdFormatField = this.IdFormatField;
			_tmp.IdHideField = this.IdHideField;
			_tmp.IdSummaryField = this.IdSummaryField;
			_tmp.IdReadOnlyField = this.IdReadOnlyField;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			TieuDeEntityData _tmp = new TieuDeEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.IdFileName = this.IdFileName;
			_tmp.IdTitleVn = this.IdTitleVn;
			_tmp.IdTitleEn = this.IdTitleEn;
			_tmp.IdSize = this.IdSize;
			_tmp.Stt = this.Stt;
			_tmp.MaTruong = this.MaTruong;
			_tmp.TrangThai = this.TrangThai;
			_tmp.IdFrom = this.IdFrom;
			_tmp.IdAn = this.IdAn;
			_tmp.IdFormatField = this.IdFormatField;
			_tmp.IdHideField = this.IdHideField;
			_tmp.IdSummaryField = this.IdSummaryField;
			_tmp.IdReadOnlyField = this.IdReadOnlyField;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TieuDeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(TieuDeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TieuDeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(TieuDeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TieuDeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(TieuDeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				TieuDeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new TieuDeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TieuDeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(TieuDeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				TieuDeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new TieuDeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region TieuDeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="TieuDe"/> object.
	/// </remarks>
	public class TieuDeEventArgs : System.EventArgs
	{
		private TieuDeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the TieuDeEventArgs class.
		///</summary>
		public TieuDeEventArgs(TieuDeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the TieuDeEventArgs class.
		///</summary>
		public TieuDeEventArgs(TieuDeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The TieuDeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="TieuDeColumn" />
		public TieuDeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all TieuDe related events.
	///</summary>
	public delegate void TieuDeEventHandler(object sender, TieuDeEventArgs e);
	
	#region TieuDeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class TieuDeComparer : System.Collections.Generic.IComparer<TieuDe>
	{
		TieuDeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:TieuDeComparer"/> class.
        /// </summary>
		public TieuDeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:TieuDeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public TieuDeComparer(TieuDeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="TieuDe"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="TieuDe"/> to compare.</param>
        /// <param name="b">The second <c>TieuDe</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(TieuDe a, TieuDe b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(TieuDe entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(TieuDe a, TieuDe b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public TieuDeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region TieuDeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="TieuDe"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class TieuDeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the TieuDeKey class.
		/// </summary>
		public TieuDeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the TieuDeKey class.
		/// </summary>
		public TieuDeKey(TieuDeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the TieuDeKey class.
		/// </summary>
		public TieuDeKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private TieuDeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public TieuDeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region TieuDeColumn Enum
	
	/// <summary>
	/// Enumerate the TieuDe columns.
	/// </summary>
	[Serializable]
	public enum TieuDeColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// IdFileName : 
		/// </summary>
		[EnumTextValue("Id File Name")]
		[ColumnEnum("IdFileName", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		IdFileName = 2,
		/// <summary>
		/// IdTitleVn : 
		/// </summary>
		[EnumTextValue("Id Title Vn")]
		[ColumnEnum("IdTitleVN", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		IdTitleVn = 3,
		/// <summary>
		/// IdTitleEn : 
		/// </summary>
		[EnumTextValue("Id Title En")]
		[ColumnEnum("IdTitleEN", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		IdTitleEn = 4,
		/// <summary>
		/// IdSize : 
		/// </summary>
		[EnumTextValue("Id Size")]
		[ColumnEnum("IdSize", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		IdSize = 5,
		/// <summary>
		/// Stt : 
		/// </summary>
		[EnumTextValue("Stt")]
		[ColumnEnum("STT", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Stt = 6,
		/// <summary>
		/// MaTruong : 
		/// </summary>
		[EnumTextValue("Ma Truong")]
		[ColumnEnum("MaTruong", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MaTruong = 7,
		/// <summary>
		/// TrangThai : 
		/// </summary>
		[EnumTextValue("Trang Thai")]
		[ColumnEnum("TrangThai", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TrangThai = 8,
		/// <summary>
		/// IdFrom : 
		/// </summary>
		[EnumTextValue("Id From")]
		[ColumnEnum("IDFrom", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		IdFrom = 9,
		/// <summary>
		/// IdAn : 
		/// </summary>
		[EnumTextValue("Id An")]
		[ColumnEnum("IdAn", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		IdAn = 10,
		/// <summary>
		/// IdFormatField : 
		/// </summary>
		[EnumTextValue("Id Format Field")]
		[ColumnEnum("IdFormatField", typeof(System.String), System.Data.DbType.String, false, false, true)]
		IdFormatField = 11,
		/// <summary>
		/// IdHideField : 
		/// </summary>
		[EnumTextValue("Id Hide Field")]
		[ColumnEnum("IdHideField", typeof(System.String), System.Data.DbType.String, false, false, true)]
		IdHideField = 12,
		/// <summary>
		/// IdSummaryField : 
		/// </summary>
		[EnumTextValue("Id Summary Field")]
		[ColumnEnum("IdSummaryField", typeof(System.String), System.Data.DbType.String, false, false, true)]
		IdSummaryField = 13,
		/// <summary>
		/// IdReadOnlyField : 
		/// </summary>
		[EnumTextValue("Id Read Only Field")]
		[ColumnEnum("IdReadOnlyField", typeof(System.String), System.Data.DbType.String, false, false, true)]
		IdReadOnlyField = 14
	}//End enum

	#endregion TieuDeColumn Enum

} // end namespace
