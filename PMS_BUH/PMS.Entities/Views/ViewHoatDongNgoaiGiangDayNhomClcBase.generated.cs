/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewHoatDongNgoaiGiangDayNhomClc.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'view_HoatDongNgoaiGiangDay_NhomCLC' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewHoatDongNgoaiGiangDayNhomClcBase")]
	public abstract partial class ViewHoatDongNgoaiGiangDayNhomClcBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		private System.Int32		  _maQuanLy = (int)0;
		
		/// <summary>
		/// TenHoatDong : 
		/// </summary>
		private System.String		  _tenHoatDong = null;
		
		/// <summary>
		/// MaDonViTinh : 
		/// </summary>
		private System.Int32?		  _maDonViTinh = null;
		
		/// <summary>
		/// SoLuong : 
		/// </summary>
		private System.Decimal?		  _soLuong = null;
		
		/// <summary>
		/// MucQuyDoi : 
		/// </summary>
		private System.Decimal?		  _mucQuyDoi = null;
		
		/// <summary>
		/// DonGia : 
		/// </summary>
		private System.Decimal?		  _donGia = null;
		
		/// <summary>
		/// GhiChu : 
		/// </summary>
		private System.String		  _ghiChu = null;
		
		/// <summary>
		/// MaNhom : 
		/// </summary>
		private System.String		  _maNhom = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewHoatDongNgoaiGiangDayNhomClcBase"/> instance.
		///</summary>
		public ViewHoatDongNgoaiGiangDayNhomClcBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewHoatDongNgoaiGiangDayNhomClcBase"/> instance.
		///</summary>
		///<param name="_maQuanLy"></param>
		///<param name="_tenHoatDong"></param>
		///<param name="_maDonViTinh"></param>
		///<param name="_soLuong"></param>
		///<param name="_mucQuyDoi"></param>
		///<param name="_donGia"></param>
		///<param name="_ghiChu"></param>
		///<param name="_maNhom"></param>
		public ViewHoatDongNgoaiGiangDayNhomClcBase(System.Int32 _maQuanLy, System.String _tenHoatDong, System.Int32? _maDonViTinh, System.Decimal? _soLuong, System.Decimal? _mucQuyDoi, System.Decimal? _donGia, System.String _ghiChu, System.String _maNhom)
		{
			this._maQuanLy = _maQuanLy;
			this._tenHoatDong = _tenHoatDong;
			this._maDonViTinh = _maDonViTinh;
			this._soLuong = _soLuong;
			this._mucQuyDoi = _mucQuyDoi;
			this._donGia = _donGia;
			this._ghiChu = _ghiChu;
			this._maNhom = _maNhom;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewHoatDongNgoaiGiangDayNhomClc"/> instance.
		///</summary>
		///<param name="_maQuanLy"></param>
		///<param name="_tenHoatDong"></param>
		///<param name="_maDonViTinh"></param>
		///<param name="_soLuong"></param>
		///<param name="_mucQuyDoi"></param>
		///<param name="_donGia"></param>
		///<param name="_ghiChu"></param>
		///<param name="_maNhom"></param>
		public static ViewHoatDongNgoaiGiangDayNhomClc CreateViewHoatDongNgoaiGiangDayNhomClc(System.Int32 _maQuanLy, System.String _tenHoatDong, System.Int32? _maDonViTinh, System.Decimal? _soLuong, System.Decimal? _mucQuyDoi, System.Decimal? _donGia, System.String _ghiChu, System.String _maNhom)
		{
			ViewHoatDongNgoaiGiangDayNhomClc newViewHoatDongNgoaiGiangDayNhomClc = new ViewHoatDongNgoaiGiangDayNhomClc();
			newViewHoatDongNgoaiGiangDayNhomClc.MaQuanLy = _maQuanLy;
			newViewHoatDongNgoaiGiangDayNhomClc.TenHoatDong = _tenHoatDong;
			newViewHoatDongNgoaiGiangDayNhomClc.MaDonViTinh = _maDonViTinh;
			newViewHoatDongNgoaiGiangDayNhomClc.SoLuong = _soLuong;
			newViewHoatDongNgoaiGiangDayNhomClc.MucQuyDoi = _mucQuyDoi;
			newViewHoatDongNgoaiGiangDayNhomClc.DonGia = _donGia;
			newViewHoatDongNgoaiGiangDayNhomClc.GhiChu = _ghiChu;
			newViewHoatDongNgoaiGiangDayNhomClc.MaNhom = _maNhom;
			return newViewHoatDongNgoaiGiangDayNhomClc;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 MaQuanLy
		{
			get
			{
				return this._maQuanLy; 
			}
			set
			{
				if (_maQuanLy == value)
					return;
					
				this._maQuanLy = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenHoatDong property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenHoatDong
		{
			get
			{
				return this._tenHoatDong; 
			}
			set
			{
				if (_tenHoatDong == value)
					return;
					
				this._tenHoatDong = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenHoatDong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaDonViTinh property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaDonViTinhNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaDonViTinh
		{
			get
			{
				return this._maDonViTinh; 
			}
			set
			{
				if (_maDonViTinh == value && MaDonViTinh != null )
					return;
					
				this._maDonViTinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaDonViTinh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoLuong property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSoLuongNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SoLuong
		{
			get
			{
				return this._soLuong; 
			}
			set
			{
				if (_soLuong == value && SoLuong != null )
					return;
					
				this._soLuong = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MucQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMucQuyDoiNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? MucQuyDoi
		{
			get
			{
				return this._mucQuyDoi; 
			}
			set
			{
				if (_mucQuyDoi == value && MucQuyDoi != null )
					return;
					
				this._mucQuyDoi = value;
				this._isDirty = true;
				
				OnPropertyChanged("MucQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DonGia property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDonGiaNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? DonGia
		{
			get
			{
				return this._donGia; 
			}
			set
			{
				if (_donGia == value && DonGia != null )
					return;
					
				this._donGia = value;
				this._isDirty = true;
				
				OnPropertyChanged("DonGia");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GhiChu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String GhiChu
		{
			get
			{
				return this._ghiChu; 
			}
			set
			{
				if (_ghiChu == value)
					return;
					
				this._ghiChu = value;
				this._isDirty = true;
				
				OnPropertyChanged("GhiChu");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaNhom property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaNhom
		{
			get
			{
				return this._maNhom; 
			}
			set
			{
				if (_maNhom == value)
					return;
					
				this._maNhom = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaNhom");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "view_HoatDongNgoaiGiangDay_NhomCLC"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewHoatDongNgoaiGiangDayNhomClcBase Entity 
		///</summary>
		public virtual ViewHoatDongNgoaiGiangDayNhomClcBase Copy()
		{
			//shallow copy entity
			ViewHoatDongNgoaiGiangDayNhomClc copy = new ViewHoatDongNgoaiGiangDayNhomClc();
				copy.MaQuanLy = this.MaQuanLy;
				copy.TenHoatDong = this.TenHoatDong;
				copy.MaDonViTinh = this.MaDonViTinh;
				copy.SoLuong = this.SoLuong;
				copy.MucQuyDoi = this.MucQuyDoi;
				copy.DonGia = this.DonGia;
				copy.GhiChu = this.GhiChu;
				copy.MaNhom = this.MaNhom;
			copy.AcceptChanges();
			return (ViewHoatDongNgoaiGiangDayNhomClc)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewHoatDongNgoaiGiangDayNhomClcBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewHoatDongNgoaiGiangDayNhomClcBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewHoatDongNgoaiGiangDayNhomClcBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewHoatDongNgoaiGiangDayNhomClcBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewHoatDongNgoaiGiangDayNhomClcBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewHoatDongNgoaiGiangDayNhomClcBase Object1, ViewHoatDongNgoaiGiangDayNhomClcBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaQuanLy != Object2.MaQuanLy)
				equal = false;
			if (Object1.TenHoatDong != null && Object2.TenHoatDong != null )
			{
				if (Object1.TenHoatDong != Object2.TenHoatDong)
					equal = false;
			}
			else if (Object1.TenHoatDong == null ^ Object1.TenHoatDong == null )
			{
				equal = false;
			}
			if (Object1.MaDonViTinh != null && Object2.MaDonViTinh != null )
			{
				if (Object1.MaDonViTinh != Object2.MaDonViTinh)
					equal = false;
			}
			else if (Object1.MaDonViTinh == null ^ Object1.MaDonViTinh == null )
			{
				equal = false;
			}
			if (Object1.SoLuong != null && Object2.SoLuong != null )
			{
				if (Object1.SoLuong != Object2.SoLuong)
					equal = false;
			}
			else if (Object1.SoLuong == null ^ Object1.SoLuong == null )
			{
				equal = false;
			}
			if (Object1.MucQuyDoi != null && Object2.MucQuyDoi != null )
			{
				if (Object1.MucQuyDoi != Object2.MucQuyDoi)
					equal = false;
			}
			else if (Object1.MucQuyDoi == null ^ Object1.MucQuyDoi == null )
			{
				equal = false;
			}
			if (Object1.DonGia != null && Object2.DonGia != null )
			{
				if (Object1.DonGia != Object2.DonGia)
					equal = false;
			}
			else if (Object1.DonGia == null ^ Object1.DonGia == null )
			{
				equal = false;
			}
			if (Object1.GhiChu != null && Object2.GhiChu != null )
			{
				if (Object1.GhiChu != Object2.GhiChu)
					equal = false;
			}
			else if (Object1.GhiChu == null ^ Object1.GhiChu == null )
			{
				equal = false;
			}
			if (Object1.MaNhom != null && Object2.MaNhom != null )
			{
				if (Object1.MaNhom != Object2.MaNhom)
					equal = false;
			}
			else if (Object1.MaNhom == null ^ Object1.MaNhom == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewHoatDongNgoaiGiangDayNhomClc entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaQuanLy":
					return entity.MaQuanLy;
				case "TenHoatDong":
					return entity.TenHoatDong;
				case "MaDonViTinh":
					return entity.MaDonViTinh;
				case "SoLuong":
					return entity.SoLuong;
				case "MucQuyDoi":
					return entity.MucQuyDoi;
				case "DonGia":
					return entity.DonGia;
				case "GhiChu":
					return entity.GhiChu;
				case "MaNhom":
					return entity.MaNhom;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewHoatDongNgoaiGiangDayNhomClc, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- MaQuanLy: {0}{8}- TenHoatDong: {1}{8}- MaDonViTinh: {2}{8}- SoLuong: {3}{8}- MucQuyDoi: {4}{8}- DonGia: {5}{8}- GhiChu: {6}{8}- MaNhom: {7}{8}", 
				this.MaQuanLy,
				(this.TenHoatDong == null) ? string.Empty : this.TenHoatDong.ToString(),
			     
				(this.MaDonViTinh == null) ? string.Empty : this.MaDonViTinh.ToString(),
			     
				(this.SoLuong == null) ? string.Empty : this.SoLuong.ToString(),
			     
				(this.MucQuyDoi == null) ? string.Empty : this.MucQuyDoi.ToString(),
			     
				(this.DonGia == null) ? string.Empty : this.DonGia.ToString(),
			     
				(this.GhiChu == null) ? string.Empty : this.GhiChu.ToString(),
			     
				(this.MaNhom == null) ? string.Empty : this.MaNhom.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewHoatDongNgoaiGiangDayNhomClc columns.
	/// </summary>
	[Serializable]
	public enum ViewHoatDongNgoaiGiangDayNhomClcColumn
	{
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		[EnumTextValue("MaQuanLy")]
		[ColumnEnum("MaQuanLy", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaQuanLy,
		/// <summary>
		/// TenHoatDong : 
		/// </summary>
		[EnumTextValue("TenHoatDong")]
		[ColumnEnum("TenHoatDong", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		TenHoatDong,
		/// <summary>
		/// MaDonViTinh : 
		/// </summary>
		[EnumTextValue("MaDonViTinh")]
		[ColumnEnum("MaDonViTinh", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaDonViTinh,
		/// <summary>
		/// SoLuong : 
		/// </summary>
		[EnumTextValue("SoLuong")]
		[ColumnEnum("SoLuong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoLuong,
		/// <summary>
		/// MucQuyDoi : 
		/// </summary>
		[EnumTextValue("MucQuyDoi")]
		[ColumnEnum("MucQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MucQuyDoi,
		/// <summary>
		/// DonGia : 
		/// </summary>
		[EnumTextValue("DonGia")]
		[ColumnEnum("DonGia", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGia,
		/// <summary>
		/// GhiChu : 
		/// </summary>
		[EnumTextValue("GhiChu")]
		[ColumnEnum("GhiChu", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		GhiChu,
		/// <summary>
		/// MaNhom : 
		/// </summary>
		[EnumTextValue("MaNhom")]
		[ColumnEnum("MaNhom", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MaNhom
	}//End enum

} // end namespace
