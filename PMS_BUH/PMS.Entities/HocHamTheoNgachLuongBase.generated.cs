
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file HocHamTheoNgachLuong.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'HocHamTheoNgachLuong' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class HocHamTheoNgachLuongBase : EntityBase, IHocHamTheoNgachLuong, IEntityId<HocHamTheoNgachLuongKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private HocHamTheoNgachLuongEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private HocHamTheoNgachLuongEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private HocHamTheoNgachLuongEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<HocHamTheoNgachLuong> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event HocHamTheoNgachLuongEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event HocHamTheoNgachLuongEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="HocHamTheoNgachLuongBase"/> instance.
		///</summary>
		public HocHamTheoNgachLuongBase()
		{
			this.entityData = new HocHamTheoNgachLuongEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="HocHamTheoNgachLuongBase"/> instance.
		///</summary>
		///<param name="_maNgachLuong"></param>
		///<param name="_maHocHam"></param>
		///<param name="_ngayHieuLuc"></param>
		public HocHamTheoNgachLuongBase(System.String _maNgachLuong, System.Int32? _maHocHam, 
			System.DateTime? _ngayHieuLuc)
		{
			this.entityData = new HocHamTheoNgachLuongEntityData();
			this.backupData = null;

			this.MaNgachLuong = _maNgachLuong;
			this.MaHocHam = _maHocHam;
			this.NgayHieuLuc = _ngayHieuLuc;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="HocHamTheoNgachLuong"/> instance.
		///</summary>
		///<param name="_maNgachLuong"></param>
		///<param name="_maHocHam"></param>
		///<param name="_ngayHieuLuc"></param>
		public static HocHamTheoNgachLuong CreateHocHamTheoNgachLuong(System.String _maNgachLuong, System.Int32? _maHocHam, 
			System.DateTime? _ngayHieuLuc)
		{
			HocHamTheoNgachLuong newHocHamTheoNgachLuong = new HocHamTheoNgachLuong();
			newHocHamTheoNgachLuong.MaNgachLuong = _maNgachLuong;
			newHocHamTheoNgachLuong.MaHocHam = _maHocHam;
			newHocHamTheoNgachLuong.NgayHieuLuc = _ngayHieuLuc;
			return newHocHamTheoNgachLuong;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Id is required")]




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(HocHamTheoNgachLuongColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HocHamTheoNgachLuongColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaNgachLuong property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String MaNgachLuong
		{
			get
			{
				return this.entityData.MaNgachLuong; 
			}
			
			set
			{
				if (this.entityData.MaNgachLuong == value)
					return;
				
                OnPropertyChanging("MaNgachLuong");                    
				OnColumnChanging(HocHamTheoNgachLuongColumn.MaNgachLuong, this.entityData.MaNgachLuong);
				this.entityData.MaNgachLuong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HocHamTheoNgachLuongColumn.MaNgachLuong, this.entityData.MaNgachLuong);
				OnPropertyChanged("MaNgachLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocHam property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocHam
		{
			get
			{
				return this.entityData.MaHocHam; 
			}
			
			set
			{
				if (this.entityData.MaHocHam == value)
					return;
				
                OnPropertyChanging("MaHocHam");                    
				OnColumnChanging(HocHamTheoNgachLuongColumn.MaHocHam, this.entityData.MaHocHam);
				this.entityData.MaHocHam = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HocHamTheoNgachLuongColumn.MaHocHam, this.entityData.MaHocHam);
				OnPropertyChanged("MaHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayHieuLuc property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayHieuLuc
		{
			get
			{
				return this.entityData.NgayHieuLuc; 
			}
			
			set
			{
				if (this.entityData.NgayHieuLuc == value)
					return;
				
                OnPropertyChanging("NgayHieuLuc");                    
				OnColumnChanging(HocHamTheoNgachLuongColumn.NgayHieuLuc, this.entityData.NgayHieuLuc);
				this.entityData.NgayHieuLuc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HocHamTheoNgachLuongColumn.NgayHieuLuc, this.entityData.NgayHieuLuc);
				OnPropertyChanged("NgayHieuLuc");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaNgachLuong", "Ma Ngach Luong", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "HocHamTheoNgachLuong"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "MaNgachLuong", "MaHocHam", "NgayHieuLuc"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as HocHamTheoNgachLuongEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (HocHamTheoNgachLuong) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<HocHamTheoNgachLuong>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as HocHamTheoNgachLuong);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed HocHamTheoNgachLuong Entity 
		///</summary>
		protected virtual HocHamTheoNgachLuong Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			HocHamTheoNgachLuong copy = new HocHamTheoNgachLuong();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.MaNgachLuong = this.MaNgachLuong;
				copy.MaHocHam = this.MaHocHam;
				copy.NgayHieuLuc = this.NgayHieuLuc;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed HocHamTheoNgachLuong Entity 
		///</summary>
		public virtual HocHamTheoNgachLuong Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed HocHamTheoNgachLuong Entity which is a deep copy of the current entity.
		///</summary>
		public virtual HocHamTheoNgachLuong DeepCopy()
		{
			return EntityHelper.Clone<HocHamTheoNgachLuong>(this as HocHamTheoNgachLuong);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as HocHamTheoNgachLuongEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new HocHamTheoNgachLuongEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as HocHamTheoNgachLuongEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(HocHamTheoNgachLuongColumn column)
		{
			switch(column)
			{
					case HocHamTheoNgachLuongColumn.Id:
					return entityData.Id != _originalData.Id;
					case HocHamTheoNgachLuongColumn.MaNgachLuong:
					return entityData.MaNgachLuong != _originalData.MaNgachLuong;
					case HocHamTheoNgachLuongColumn.MaHocHam:
					return entityData.MaHocHam != _originalData.MaHocHam;
					case HocHamTheoNgachLuongColumn.NgayHieuLuc:
					return entityData.NgayHieuLuc != _originalData.NgayHieuLuc;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< HocHamTheoNgachLuongColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.MaNgachLuong != _originalData.MaNgachLuong;
			result = result || entityData.MaHocHam != _originalData.MaHocHam;
			result = result || entityData.NgayHieuLuc != _originalData.NgayHieuLuc;
			return result;
		}	
		
		///<summary>
		///  Returns a HocHamTheoNgachLuong Entity with the original data.
		///</summary>
		public HocHamTheoNgachLuong GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateHocHamTheoNgachLuong(
				_originalData.MaNgachLuong,
				_originalData.MaHocHam,
				_originalData.NgayHieuLuc
				);
				
			return (HocHamTheoNgachLuong)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="HocHamTheoNgachLuongBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is HocHamTheoNgachLuongBase)
				return ValueEquals(this, (HocHamTheoNgachLuongBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="HocHamTheoNgachLuongBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.MaNgachLuong == null) ? string.Empty : this.MaNgachLuong.ToString()).GetHashCode() ^ 
					((this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString()).GetHashCode() ^ 
					((this.NgayHieuLuc == null) ? string.Empty : this.NgayHieuLuc.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="HocHamTheoNgachLuongBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(HocHamTheoNgachLuongBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="HocHamTheoNgachLuongBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="HocHamTheoNgachLuongBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="HocHamTheoNgachLuongBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(HocHamTheoNgachLuongBase Object1, HocHamTheoNgachLuongBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.MaNgachLuong != null && Object2.MaNgachLuong != null )
			{
				if (Object1.MaNgachLuong != Object2.MaNgachLuong)
					equal = false;
			}
			else if (Object1.MaNgachLuong == null ^ Object2.MaNgachLuong == null )
			{
				equal = false;
			}
			if ( Object1.MaHocHam != null && Object2.MaHocHam != null )
			{
				if (Object1.MaHocHam != Object2.MaHocHam)
					equal = false;
			}
			else if (Object1.MaHocHam == null ^ Object2.MaHocHam == null )
			{
				equal = false;
			}
			if ( Object1.NgayHieuLuc != null && Object2.NgayHieuLuc != null )
			{
				if (Object1.NgayHieuLuc != Object2.NgayHieuLuc)
					equal = false;
			}
			else if (Object1.NgayHieuLuc == null ^ Object2.NgayHieuLuc == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((HocHamTheoNgachLuongBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static HocHamTheoNgachLuongComparer GetComparer()
        {
            return new HocHamTheoNgachLuongComparer();
        }
        */

        // Comparer delegates back to HocHamTheoNgachLuong
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(HocHamTheoNgachLuong rhs, HocHamTheoNgachLuongColumn which)
        {
            switch (which)
            {
            	
            	
            	case HocHamTheoNgachLuongColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case HocHamTheoNgachLuongColumn.MaNgachLuong:
            		return this.MaNgachLuong.CompareTo(rhs.MaNgachLuong);
            		
            		                 
            	
            	
            	case HocHamTheoNgachLuongColumn.MaHocHam:
            		return this.MaHocHam.Value.CompareTo(rhs.MaHocHam.Value);
            		
            		                 
            	
            	
            	case HocHamTheoNgachLuongColumn.NgayHieuLuc:
            		return this.NgayHieuLuc.Value.CompareTo(rhs.NgayHieuLuc.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<HocHamTheoNgachLuongKey> Members
		
		// member variable for the EntityId property
		private HocHamTheoNgachLuongKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual HocHamTheoNgachLuongKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new HocHamTheoNgachLuongKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("HocHamTheoNgachLuong")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{5}{4}- Id: {0}{4}- MaNgachLuong: {1}{4}- MaHocHam: {2}{4}- NgayHieuLuc: {3}{4}{6}", 
				this.Id,
				(this.MaNgachLuong == null) ? string.Empty : this.MaNgachLuong.ToString(),
				(this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString(),
				(this.NgayHieuLuc == null) ? string.Empty : this.NgayHieuLuc.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'HocHamTheoNgachLuong' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class HocHamTheoNgachLuongEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "HocHamTheoNgachLuong"</remarks>
		public System.Int64 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaNgachLuong : 
		/// </summary>
		public System.String MaNgachLuong = null;
		
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		public System.Int32? MaHocHam = null;
		
		/// <summary>
		/// NgayHieuLuc : 
		/// </summary>
		public System.DateTime? NgayHieuLuc = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			HocHamTheoNgachLuongEntityData _tmp = new HocHamTheoNgachLuongEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.MaNgachLuong = this.MaNgachLuong;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.NgayHieuLuc = this.NgayHieuLuc;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			HocHamTheoNgachLuongEntityData _tmp = new HocHamTheoNgachLuongEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.MaNgachLuong = this.MaNgachLuong;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.NgayHieuLuc = this.NgayHieuLuc;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HocHamTheoNgachLuongColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(HocHamTheoNgachLuongColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HocHamTheoNgachLuongColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(HocHamTheoNgachLuongColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HocHamTheoNgachLuongColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(HocHamTheoNgachLuongColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				HocHamTheoNgachLuongEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new HocHamTheoNgachLuongEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HocHamTheoNgachLuongColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(HocHamTheoNgachLuongColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				HocHamTheoNgachLuongEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new HocHamTheoNgachLuongEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region HocHamTheoNgachLuongEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="HocHamTheoNgachLuong"/> object.
	/// </remarks>
	public class HocHamTheoNgachLuongEventArgs : System.EventArgs
	{
		private HocHamTheoNgachLuongColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the HocHamTheoNgachLuongEventArgs class.
		///</summary>
		public HocHamTheoNgachLuongEventArgs(HocHamTheoNgachLuongColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the HocHamTheoNgachLuongEventArgs class.
		///</summary>
		public HocHamTheoNgachLuongEventArgs(HocHamTheoNgachLuongColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The HocHamTheoNgachLuongColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="HocHamTheoNgachLuongColumn" />
		public HocHamTheoNgachLuongColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all HocHamTheoNgachLuong related events.
	///</summary>
	public delegate void HocHamTheoNgachLuongEventHandler(object sender, HocHamTheoNgachLuongEventArgs e);
	
	#region HocHamTheoNgachLuongComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class HocHamTheoNgachLuongComparer : System.Collections.Generic.IComparer<HocHamTheoNgachLuong>
	{
		HocHamTheoNgachLuongColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:HocHamTheoNgachLuongComparer"/> class.
        /// </summary>
		public HocHamTheoNgachLuongComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:HocHamTheoNgachLuongComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public HocHamTheoNgachLuongComparer(HocHamTheoNgachLuongColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="HocHamTheoNgachLuong"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="HocHamTheoNgachLuong"/> to compare.</param>
        /// <param name="b">The second <c>HocHamTheoNgachLuong</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(HocHamTheoNgachLuong a, HocHamTheoNgachLuong b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(HocHamTheoNgachLuong entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(HocHamTheoNgachLuong a, HocHamTheoNgachLuong b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public HocHamTheoNgachLuongColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region HocHamTheoNgachLuongKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="HocHamTheoNgachLuong"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class HocHamTheoNgachLuongKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the HocHamTheoNgachLuongKey class.
		/// </summary>
		public HocHamTheoNgachLuongKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the HocHamTheoNgachLuongKey class.
		/// </summary>
		public HocHamTheoNgachLuongKey(HocHamTheoNgachLuongBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the HocHamTheoNgachLuongKey class.
		/// </summary>
		public HocHamTheoNgachLuongKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private HocHamTheoNgachLuongBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public HocHamTheoNgachLuongBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region HocHamTheoNgachLuongColumn Enum
	
	/// <summary>
	/// Enumerate the HocHamTheoNgachLuong columns.
	/// </summary>
	[Serializable]
	public enum HocHamTheoNgachLuongColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// MaNgachLuong : 
		/// </summary>
		[EnumTextValue("Ma Ngach Luong")]
		[ColumnEnum("MaNgachLuong", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		MaNgachLuong = 2,
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		[EnumTextValue("Ma Hoc Ham")]
		[ColumnEnum("MaHocHam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocHam = 3,
		/// <summary>
		/// NgayHieuLuc : 
		/// </summary>
		[EnumTextValue("Ngay Hieu Luc")]
		[ColumnEnum("NgayHieuLuc", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		NgayHieuLuc = 4
	}//End enum

	#endregion HocHamTheoNgachLuongColumn Enum

} // end namespace
