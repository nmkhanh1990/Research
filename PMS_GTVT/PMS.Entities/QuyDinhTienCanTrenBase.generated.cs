
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file QuyDinhTienCanTren.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'QuyDinhTienCanTren' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class QuyDinhTienCanTrenBase : EntityBase, IQuyDinhTienCanTren, IEntityId<QuyDinhTienCanTrenKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private QuyDinhTienCanTrenEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private QuyDinhTienCanTrenEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private QuyDinhTienCanTrenEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<QuyDinhTienCanTren> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event QuyDinhTienCanTrenEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event QuyDinhTienCanTrenEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="QuyDinhTienCanTrenBase"/> instance.
		///</summary>
		public QuyDinhTienCanTrenBase()
		{
			this.entityData = new QuyDinhTienCanTrenEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="QuyDinhTienCanTrenBase"/> instance.
		///</summary>
		///<param name="_stt"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_maLoaiNhanVien"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_tienCanTren"></param>
		///<param name="_tietTran"></param>
		///<param name="_hocHam"></param>
		///<param name="_hocVi"></param>
		///<param name="_loaiNhanVien"></param>
		///<param name="_loaiGiangVien"></param>
		///<param name="_chucVu"></param>
		///<param name="_truongHopKhac"></param>
		///<param name="_congVoiGioChuan"></param>
		public QuyDinhTienCanTrenBase(System.Int32? _stt, System.String _namHoc, System.String _hocKy, 
			System.Int32? _maHocHam, System.Int32? _maHocVi, System.Int32? _maLoaiNhanVien, 
			System.Int32? _maLoaiGiangVien, System.Decimal? _tienCanTren, System.Decimal? _tietTran, 
			System.String _hocHam, System.String _hocVi, System.String _loaiNhanVien, 
			System.String _loaiGiangVien, System.String _chucVu, System.String _truongHopKhac, 
			System.Decimal? _congVoiGioChuan)
		{
			this.entityData = new QuyDinhTienCanTrenEntityData();
			this.backupData = null;

			this.Stt = _stt;
			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.MaHocHam = _maHocHam;
			this.MaHocVi = _maHocVi;
			this.MaLoaiNhanVien = _maLoaiNhanVien;
			this.MaLoaiGiangVien = _maLoaiGiangVien;
			this.TienCanTren = _tienCanTren;
			this.TietTran = _tietTran;
			this.HocHam = _hocHam;
			this.HocVi = _hocVi;
			this.LoaiNhanVien = _loaiNhanVien;
			this.LoaiGiangVien = _loaiGiangVien;
			this.ChucVu = _chucVu;
			this.TruongHopKhac = _truongHopKhac;
			this.CongVoiGioChuan = _congVoiGioChuan;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="QuyDinhTienCanTren"/> instance.
		///</summary>
		///<param name="_stt"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_maLoaiNhanVien"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_tienCanTren"></param>
		///<param name="_tietTran"></param>
		///<param name="_hocHam"></param>
		///<param name="_hocVi"></param>
		///<param name="_loaiNhanVien"></param>
		///<param name="_loaiGiangVien"></param>
		///<param name="_chucVu"></param>
		///<param name="_truongHopKhac"></param>
		///<param name="_congVoiGioChuan"></param>
		public static QuyDinhTienCanTren CreateQuyDinhTienCanTren(System.Int32? _stt, System.String _namHoc, System.String _hocKy, 
			System.Int32? _maHocHam, System.Int32? _maHocVi, System.Int32? _maLoaiNhanVien, 
			System.Int32? _maLoaiGiangVien, System.Decimal? _tienCanTren, System.Decimal? _tietTran, 
			System.String _hocHam, System.String _hocVi, System.String _loaiNhanVien, 
			System.String _loaiGiangVien, System.String _chucVu, System.String _truongHopKhac, 
			System.Decimal? _congVoiGioChuan)
		{
			QuyDinhTienCanTren newQuyDinhTienCanTren = new QuyDinhTienCanTren();
			newQuyDinhTienCanTren.Stt = _stt;
			newQuyDinhTienCanTren.NamHoc = _namHoc;
			newQuyDinhTienCanTren.HocKy = _hocKy;
			newQuyDinhTienCanTren.MaHocHam = _maHocHam;
			newQuyDinhTienCanTren.MaHocVi = _maHocVi;
			newQuyDinhTienCanTren.MaLoaiNhanVien = _maLoaiNhanVien;
			newQuyDinhTienCanTren.MaLoaiGiangVien = _maLoaiGiangVien;
			newQuyDinhTienCanTren.TienCanTren = _tienCanTren;
			newQuyDinhTienCanTren.TietTran = _tietTran;
			newQuyDinhTienCanTren.HocHam = _hocHam;
			newQuyDinhTienCanTren.HocVi = _hocVi;
			newQuyDinhTienCanTren.LoaiNhanVien = _loaiNhanVien;
			newQuyDinhTienCanTren.LoaiGiangVien = _loaiGiangVien;
			newQuyDinhTienCanTren.ChucVu = _chucVu;
			newQuyDinhTienCanTren.TruongHopKhac = _truongHopKhac;
			newQuyDinhTienCanTren.CongVoiGioChuan = _congVoiGioChuan;
			return newQuyDinhTienCanTren;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Id is required")]




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Stt property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Stt
		{
			get
			{
				return this.entityData.Stt; 
			}
			
			set
			{
				if (this.entityData.Stt == value)
					return;
				
                OnPropertyChanging("Stt");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.Stt, this.entityData.Stt);
				this.entityData.Stt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.Stt, this.entityData.Stt);
				OnPropertyChanged("Stt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocHam property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocHam
		{
			get
			{
				return this.entityData.MaHocHam; 
			}
			
			set
			{
				if (this.entityData.MaHocHam == value)
					return;
				
                OnPropertyChanging("MaHocHam");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.MaHocHam, this.entityData.MaHocHam);
				this.entityData.MaHocHam = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.MaHocHam, this.entityData.MaHocHam);
				OnPropertyChanged("MaHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocVi property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocVi
		{
			get
			{
				return this.entityData.MaHocVi; 
			}
			
			set
			{
				if (this.entityData.MaHocVi == value)
					return;
				
                OnPropertyChanging("MaHocVi");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.MaHocVi, this.entityData.MaHocVi);
				this.entityData.MaHocVi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.MaHocVi, this.entityData.MaHocVi);
				OnPropertyChanged("MaHocVi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLoaiNhanVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaLoaiNhanVien
		{
			get
			{
				return this.entityData.MaLoaiNhanVien; 
			}
			
			set
			{
				if (this.entityData.MaLoaiNhanVien == value)
					return;
				
                OnPropertyChanging("MaLoaiNhanVien");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.MaLoaiNhanVien, this.entityData.MaLoaiNhanVien);
				this.entityData.MaLoaiNhanVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.MaLoaiNhanVien, this.entityData.MaLoaiNhanVien);
				OnPropertyChanged("MaLoaiNhanVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLoaiGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaLoaiGiangVien
		{
			get
			{
				return this.entityData.MaLoaiGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaLoaiGiangVien == value)
					return;
				
                OnPropertyChanging("MaLoaiGiangVien");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.MaLoaiGiangVien, this.entityData.MaLoaiGiangVien);
				this.entityData.MaLoaiGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.MaLoaiGiangVien, this.entityData.MaLoaiGiangVien);
				OnPropertyChanged("MaLoaiGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TienCanTren property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TienCanTren
		{
			get
			{
				return this.entityData.TienCanTren; 
			}
			
			set
			{
				if (this.entityData.TienCanTren == value)
					return;
				
                OnPropertyChanging("TienCanTren");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.TienCanTren, this.entityData.TienCanTren);
				this.entityData.TienCanTren = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.TienCanTren, this.entityData.TienCanTren);
				OnPropertyChanged("TienCanTren");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietTran property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TietTran
		{
			get
			{
				return this.entityData.TietTran; 
			}
			
			set
			{
				if (this.entityData.TietTran == value)
					return;
				
                OnPropertyChanging("TietTran");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.TietTran, this.entityData.TietTran);
				this.entityData.TietTran = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.TietTran, this.entityData.TietTran);
				OnPropertyChanged("TietTran");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocHam property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String HocHam
		{
			get
			{
				return this.entityData.HocHam; 
			}
			
			set
			{
				if (this.entityData.HocHam == value)
					return;
				
                OnPropertyChanging("HocHam");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.HocHam, this.entityData.HocHam);
				this.entityData.HocHam = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.HocHam, this.entityData.HocHam);
				OnPropertyChanged("HocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocVi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String HocVi
		{
			get
			{
				return this.entityData.HocVi; 
			}
			
			set
			{
				if (this.entityData.HocVi == value)
					return;
				
                OnPropertyChanging("HocVi");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.HocVi, this.entityData.HocVi);
				this.entityData.HocVi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.HocVi, this.entityData.HocVi);
				OnPropertyChanged("HocVi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoaiNhanVien property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String LoaiNhanVien
		{
			get
			{
				return this.entityData.LoaiNhanVien; 
			}
			
			set
			{
				if (this.entityData.LoaiNhanVien == value)
					return;
				
                OnPropertyChanging("LoaiNhanVien");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.LoaiNhanVien, this.entityData.LoaiNhanVien);
				this.entityData.LoaiNhanVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.LoaiNhanVien, this.entityData.LoaiNhanVien);
				OnPropertyChanged("LoaiNhanVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoaiGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String LoaiGiangVien
		{
			get
			{
				return this.entityData.LoaiGiangVien; 
			}
			
			set
			{
				if (this.entityData.LoaiGiangVien == value)
					return;
				
                OnPropertyChanging("LoaiGiangVien");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.LoaiGiangVien, this.entityData.LoaiGiangVien);
				this.entityData.LoaiGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.LoaiGiangVien, this.entityData.LoaiGiangVien);
				OnPropertyChanged("LoaiGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChucVu property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String ChucVu
		{
			get
			{
				return this.entityData.ChucVu; 
			}
			
			set
			{
				if (this.entityData.ChucVu == value)
					return;
				
                OnPropertyChanging("ChucVu");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.ChucVu, this.entityData.ChucVu);
				this.entityData.ChucVu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.ChucVu, this.entityData.ChucVu);
				OnPropertyChanged("ChucVu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TruongHopKhac property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String TruongHopKhac
		{
			get
			{
				return this.entityData.TruongHopKhac; 
			}
			
			set
			{
				if (this.entityData.TruongHopKhac == value)
					return;
				
                OnPropertyChanging("TruongHopKhac");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.TruongHopKhac, this.entityData.TruongHopKhac);
				this.entityData.TruongHopKhac = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.TruongHopKhac, this.entityData.TruongHopKhac);
				OnPropertyChanged("TruongHopKhac");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CongVoiGioChuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CongVoiGioChuan
		{
			get
			{
				return this.entityData.CongVoiGioChuan; 
			}
			
			set
			{
				if (this.entityData.CongVoiGioChuan == value)
					return;
				
                OnPropertyChanging("CongVoiGioChuan");                    
				OnColumnChanging(QuyDinhTienCanTrenColumn.CongVoiGioChuan, this.entityData.CongVoiGioChuan);
				this.entityData.CongVoiGioChuan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDinhTienCanTrenColumn.CongVoiGioChuan, this.entityData.CongVoiGioChuan);
				OnPropertyChanged("CongVoiGioChuan");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="HocHam"/>.
		/// </summary>
		/// <value>The source HocHam for MaHocHam.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual HocHam MaHocHamSource
      	{
            get { return entityData.MaHocHamSource; }
            set { entityData.MaHocHamSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="HocVi"/>.
		/// </summary>
		/// <value>The source HocVi for MaHocVi.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual HocVi MaHocViSource
      	{
            get { return entityData.MaHocViSource; }
            set { entityData.MaHocViSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="LoaiGiangVien"/>.
		/// </summary>
		/// <value>The source LoaiGiangVien for MaLoaiGiangVien.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual LoaiGiangVien MaLoaiGiangVienSource
      	{
            get { return entityData.MaLoaiGiangVienSource; }
            set { entityData.MaLoaiGiangVienSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="LoaiNhanVien"/>.
		/// </summary>
		/// <value>The source LoaiNhanVien for MaLoaiNhanVien.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual LoaiNhanVien MaLoaiNhanVienSource
      	{
            get { return entityData.MaLoaiNhanVienSource; }
            set { entityData.MaLoaiNhanVienSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocHam", "Hoc Ham", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocVi", "Hoc Vi", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LoaiNhanVien", "Loai Nhan Vien", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LoaiGiangVien", "Loai Giang Vien", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ChucVu", "Chuc Vu", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TruongHopKhac", "Truong Hop Khac", 1000));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "QuyDinhTienCanTren"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "STT", "NamHoc", "HocKy", "MaHocHam", "MaHocVi", "MaLoaiNhanVien", "MaLoaiGiangVien", "TienCanTren", "TietTran", "HocHam", "HocVi", "LoaiNhanVien", "LoaiGiangVien", "ChucVu", "TruongHopKhac", "CongVoiGioChuan"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as QuyDinhTienCanTrenEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (QuyDinhTienCanTren) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<QuyDinhTienCanTren>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as QuyDinhTienCanTren);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed QuyDinhTienCanTren Entity 
		///</summary>
		protected virtual QuyDinhTienCanTren Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			QuyDinhTienCanTren copy = new QuyDinhTienCanTren();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.Stt = this.Stt;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaHocHam = this.MaHocHam;
				copy.MaHocVi = this.MaHocVi;
				copy.MaLoaiNhanVien = this.MaLoaiNhanVien;
				copy.MaLoaiGiangVien = this.MaLoaiGiangVien;
				copy.TienCanTren = this.TienCanTren;
				copy.TietTran = this.TietTran;
				copy.HocHam = this.HocHam;
				copy.HocVi = this.HocVi;
				copy.LoaiNhanVien = this.LoaiNhanVien;
				copy.LoaiGiangVien = this.LoaiGiangVien;
				copy.ChucVu = this.ChucVu;
				copy.TruongHopKhac = this.TruongHopKhac;
				copy.CongVoiGioChuan = this.CongVoiGioChuan;
			
			if (this.MaHocHamSource != null && existingCopies.Contains(this.MaHocHamSource))
				copy.MaHocHamSource = existingCopies[this.MaHocHamSource] as HocHam;
			else
				copy.MaHocHamSource = MakeCopyOf(this.MaHocHamSource, existingCopies) as HocHam;
			if (this.MaHocViSource != null && existingCopies.Contains(this.MaHocViSource))
				copy.MaHocViSource = existingCopies[this.MaHocViSource] as HocVi;
			else
				copy.MaHocViSource = MakeCopyOf(this.MaHocViSource, existingCopies) as HocVi;
			if (this.MaLoaiGiangVienSource != null && existingCopies.Contains(this.MaLoaiGiangVienSource))
				copy.MaLoaiGiangVienSource = existingCopies[this.MaLoaiGiangVienSource] as LoaiGiangVien;
			else
				copy.MaLoaiGiangVienSource = MakeCopyOf(this.MaLoaiGiangVienSource, existingCopies) as LoaiGiangVien;
			if (this.MaLoaiNhanVienSource != null && existingCopies.Contains(this.MaLoaiNhanVienSource))
				copy.MaLoaiNhanVienSource = existingCopies[this.MaLoaiNhanVienSource] as LoaiNhanVien;
			else
				copy.MaLoaiNhanVienSource = MakeCopyOf(this.MaLoaiNhanVienSource, existingCopies) as LoaiNhanVien;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed QuyDinhTienCanTren Entity 
		///</summary>
		public virtual QuyDinhTienCanTren Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed QuyDinhTienCanTren Entity which is a deep copy of the current entity.
		///</summary>
		public virtual QuyDinhTienCanTren DeepCopy()
		{
			return EntityHelper.Clone<QuyDinhTienCanTren>(this as QuyDinhTienCanTren);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as QuyDinhTienCanTrenEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new QuyDinhTienCanTrenEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as QuyDinhTienCanTrenEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(QuyDinhTienCanTrenColumn column)
		{
			switch(column)
			{
					case QuyDinhTienCanTrenColumn.Id:
					return entityData.Id != _originalData.Id;
					case QuyDinhTienCanTrenColumn.Stt:
					return entityData.Stt != _originalData.Stt;
					case QuyDinhTienCanTrenColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case QuyDinhTienCanTrenColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case QuyDinhTienCanTrenColumn.MaHocHam:
					return entityData.MaHocHam != _originalData.MaHocHam;
					case QuyDinhTienCanTrenColumn.MaHocVi:
					return entityData.MaHocVi != _originalData.MaHocVi;
					case QuyDinhTienCanTrenColumn.MaLoaiNhanVien:
					return entityData.MaLoaiNhanVien != _originalData.MaLoaiNhanVien;
					case QuyDinhTienCanTrenColumn.MaLoaiGiangVien:
					return entityData.MaLoaiGiangVien != _originalData.MaLoaiGiangVien;
					case QuyDinhTienCanTrenColumn.TienCanTren:
					return entityData.TienCanTren != _originalData.TienCanTren;
					case QuyDinhTienCanTrenColumn.TietTran:
					return entityData.TietTran != _originalData.TietTran;
					case QuyDinhTienCanTrenColumn.HocHam:
					return entityData.HocHam != _originalData.HocHam;
					case QuyDinhTienCanTrenColumn.HocVi:
					return entityData.HocVi != _originalData.HocVi;
					case QuyDinhTienCanTrenColumn.LoaiNhanVien:
					return entityData.LoaiNhanVien != _originalData.LoaiNhanVien;
					case QuyDinhTienCanTrenColumn.LoaiGiangVien:
					return entityData.LoaiGiangVien != _originalData.LoaiGiangVien;
					case QuyDinhTienCanTrenColumn.ChucVu:
					return entityData.ChucVu != _originalData.ChucVu;
					case QuyDinhTienCanTrenColumn.TruongHopKhac:
					return entityData.TruongHopKhac != _originalData.TruongHopKhac;
					case QuyDinhTienCanTrenColumn.CongVoiGioChuan:
					return entityData.CongVoiGioChuan != _originalData.CongVoiGioChuan;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< QuyDinhTienCanTrenColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.Stt != _originalData.Stt;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.MaHocHam != _originalData.MaHocHam;
			result = result || entityData.MaHocVi != _originalData.MaHocVi;
			result = result || entityData.MaLoaiNhanVien != _originalData.MaLoaiNhanVien;
			result = result || entityData.MaLoaiGiangVien != _originalData.MaLoaiGiangVien;
			result = result || entityData.TienCanTren != _originalData.TienCanTren;
			result = result || entityData.TietTran != _originalData.TietTran;
			result = result || entityData.HocHam != _originalData.HocHam;
			result = result || entityData.HocVi != _originalData.HocVi;
			result = result || entityData.LoaiNhanVien != _originalData.LoaiNhanVien;
			result = result || entityData.LoaiGiangVien != _originalData.LoaiGiangVien;
			result = result || entityData.ChucVu != _originalData.ChucVu;
			result = result || entityData.TruongHopKhac != _originalData.TruongHopKhac;
			result = result || entityData.CongVoiGioChuan != _originalData.CongVoiGioChuan;
			return result;
		}	
		
		///<summary>
		///  Returns a QuyDinhTienCanTren Entity with the original data.
		///</summary>
		public QuyDinhTienCanTren GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateQuyDinhTienCanTren(
				_originalData.Stt,
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.MaHocHam,
				_originalData.MaHocVi,
				_originalData.MaLoaiNhanVien,
				_originalData.MaLoaiGiangVien,
				_originalData.TienCanTren,
				_originalData.TietTran,
				_originalData.HocHam,
				_originalData.HocVi,
				_originalData.LoaiNhanVien,
				_originalData.LoaiGiangVien,
				_originalData.ChucVu,
				_originalData.TruongHopKhac,
				_originalData.CongVoiGioChuan
				);
				
			return (QuyDinhTienCanTren)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="QuyDinhTienCanTrenBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is QuyDinhTienCanTrenBase)
				return ValueEquals(this, (QuyDinhTienCanTrenBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="QuyDinhTienCanTrenBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.Stt == null) ? string.Empty : this.Stt.ToString()).GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode() ^ 
					((this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString()).GetHashCode() ^ 
					((this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString()).GetHashCode() ^ 
					((this.MaLoaiNhanVien == null) ? string.Empty : this.MaLoaiNhanVien.ToString()).GetHashCode() ^ 
					((this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString()).GetHashCode() ^ 
					((this.TienCanTren == null) ? string.Empty : this.TienCanTren.ToString()).GetHashCode() ^ 
					((this.TietTran == null) ? string.Empty : this.TietTran.ToString()).GetHashCode() ^ 
					((this.HocHam == null) ? string.Empty : this.HocHam.ToString()).GetHashCode() ^ 
					((this.HocVi == null) ? string.Empty : this.HocVi.ToString()).GetHashCode() ^ 
					((this.LoaiNhanVien == null) ? string.Empty : this.LoaiNhanVien.ToString()).GetHashCode() ^ 
					((this.LoaiGiangVien == null) ? string.Empty : this.LoaiGiangVien.ToString()).GetHashCode() ^ 
					((this.ChucVu == null) ? string.Empty : this.ChucVu.ToString()).GetHashCode() ^ 
					((this.TruongHopKhac == null) ? string.Empty : this.TruongHopKhac.ToString()).GetHashCode() ^ 
					((this.CongVoiGioChuan == null) ? string.Empty : this.CongVoiGioChuan.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="QuyDinhTienCanTrenBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(QuyDinhTienCanTrenBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="QuyDinhTienCanTrenBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="QuyDinhTienCanTrenBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="QuyDinhTienCanTrenBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(QuyDinhTienCanTrenBase Object1, QuyDinhTienCanTrenBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.Stt != null && Object2.Stt != null )
			{
				if (Object1.Stt != Object2.Stt)
					equal = false;
			}
			else if (Object1.Stt == null ^ Object2.Stt == null )
			{
				equal = false;
			}
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
			if ( Object1.MaHocHam != null && Object2.MaHocHam != null )
			{
				if (Object1.MaHocHam != Object2.MaHocHam)
					equal = false;
			}
			else if (Object1.MaHocHam == null ^ Object2.MaHocHam == null )
			{
				equal = false;
			}
			if ( Object1.MaHocVi != null && Object2.MaHocVi != null )
			{
				if (Object1.MaHocVi != Object2.MaHocVi)
					equal = false;
			}
			else if (Object1.MaHocVi == null ^ Object2.MaHocVi == null )
			{
				equal = false;
			}
			if ( Object1.MaLoaiNhanVien != null && Object2.MaLoaiNhanVien != null )
			{
				if (Object1.MaLoaiNhanVien != Object2.MaLoaiNhanVien)
					equal = false;
			}
			else if (Object1.MaLoaiNhanVien == null ^ Object2.MaLoaiNhanVien == null )
			{
				equal = false;
			}
			if ( Object1.MaLoaiGiangVien != null && Object2.MaLoaiGiangVien != null )
			{
				if (Object1.MaLoaiGiangVien != Object2.MaLoaiGiangVien)
					equal = false;
			}
			else if (Object1.MaLoaiGiangVien == null ^ Object2.MaLoaiGiangVien == null )
			{
				equal = false;
			}
			if ( Object1.TienCanTren != null && Object2.TienCanTren != null )
			{
				if (Object1.TienCanTren != Object2.TienCanTren)
					equal = false;
			}
			else if (Object1.TienCanTren == null ^ Object2.TienCanTren == null )
			{
				equal = false;
			}
			if ( Object1.TietTran != null && Object2.TietTran != null )
			{
				if (Object1.TietTran != Object2.TietTran)
					equal = false;
			}
			else if (Object1.TietTran == null ^ Object2.TietTran == null )
			{
				equal = false;
			}
			if ( Object1.HocHam != null && Object2.HocHam != null )
			{
				if (Object1.HocHam != Object2.HocHam)
					equal = false;
			}
			else if (Object1.HocHam == null ^ Object2.HocHam == null )
			{
				equal = false;
			}
			if ( Object1.HocVi != null && Object2.HocVi != null )
			{
				if (Object1.HocVi != Object2.HocVi)
					equal = false;
			}
			else if (Object1.HocVi == null ^ Object2.HocVi == null )
			{
				equal = false;
			}
			if ( Object1.LoaiNhanVien != null && Object2.LoaiNhanVien != null )
			{
				if (Object1.LoaiNhanVien != Object2.LoaiNhanVien)
					equal = false;
			}
			else if (Object1.LoaiNhanVien == null ^ Object2.LoaiNhanVien == null )
			{
				equal = false;
			}
			if ( Object1.LoaiGiangVien != null && Object2.LoaiGiangVien != null )
			{
				if (Object1.LoaiGiangVien != Object2.LoaiGiangVien)
					equal = false;
			}
			else if (Object1.LoaiGiangVien == null ^ Object2.LoaiGiangVien == null )
			{
				equal = false;
			}
			if ( Object1.ChucVu != null && Object2.ChucVu != null )
			{
				if (Object1.ChucVu != Object2.ChucVu)
					equal = false;
			}
			else if (Object1.ChucVu == null ^ Object2.ChucVu == null )
			{
				equal = false;
			}
			if ( Object1.TruongHopKhac != null && Object2.TruongHopKhac != null )
			{
				if (Object1.TruongHopKhac != Object2.TruongHopKhac)
					equal = false;
			}
			else if (Object1.TruongHopKhac == null ^ Object2.TruongHopKhac == null )
			{
				equal = false;
			}
			if ( Object1.CongVoiGioChuan != null && Object2.CongVoiGioChuan != null )
			{
				if (Object1.CongVoiGioChuan != Object2.CongVoiGioChuan)
					equal = false;
			}
			else if (Object1.CongVoiGioChuan == null ^ Object2.CongVoiGioChuan == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((QuyDinhTienCanTrenBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static QuyDinhTienCanTrenComparer GetComparer()
        {
            return new QuyDinhTienCanTrenComparer();
        }
        */

        // Comparer delegates back to QuyDinhTienCanTren
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(QuyDinhTienCanTren rhs, QuyDinhTienCanTrenColumn which)
        {
            switch (which)
            {
            	
            	
            	case QuyDinhTienCanTrenColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.Stt:
            		return this.Stt.Value.CompareTo(rhs.Stt.Value);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.MaHocHam:
            		return this.MaHocHam.Value.CompareTo(rhs.MaHocHam.Value);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.MaHocVi:
            		return this.MaHocVi.Value.CompareTo(rhs.MaHocVi.Value);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.MaLoaiNhanVien:
            		return this.MaLoaiNhanVien.Value.CompareTo(rhs.MaLoaiNhanVien.Value);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.MaLoaiGiangVien:
            		return this.MaLoaiGiangVien.Value.CompareTo(rhs.MaLoaiGiangVien.Value);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.TienCanTren:
            		return this.TienCanTren.Value.CompareTo(rhs.TienCanTren.Value);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.TietTran:
            		return this.TietTran.Value.CompareTo(rhs.TietTran.Value);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.HocHam:
            		return this.HocHam.CompareTo(rhs.HocHam);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.HocVi:
            		return this.HocVi.CompareTo(rhs.HocVi);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.LoaiNhanVien:
            		return this.LoaiNhanVien.CompareTo(rhs.LoaiNhanVien);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.LoaiGiangVien:
            		return this.LoaiGiangVien.CompareTo(rhs.LoaiGiangVien);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.ChucVu:
            		return this.ChucVu.CompareTo(rhs.ChucVu);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.TruongHopKhac:
            		return this.TruongHopKhac.CompareTo(rhs.TruongHopKhac);
            		
            		                 
            	
            	
            	case QuyDinhTienCanTrenColumn.CongVoiGioChuan:
            		return this.CongVoiGioChuan.Value.CompareTo(rhs.CongVoiGioChuan.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<QuyDinhTienCanTrenKey> Members
		
		// member variable for the EntityId property
		private QuyDinhTienCanTrenKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual QuyDinhTienCanTrenKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new QuyDinhTienCanTrenKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("QuyDinhTienCanTren")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- Id: {0}{17}- Stt: {1}{17}- NamHoc: {2}{17}- HocKy: {3}{17}- MaHocHam: {4}{17}- MaHocVi: {5}{17}- MaLoaiNhanVien: {6}{17}- MaLoaiGiangVien: {7}{17}- TienCanTren: {8}{17}- TietTran: {9}{17}- HocHam: {10}{17}- HocVi: {11}{17}- LoaiNhanVien: {12}{17}- LoaiGiangVien: {13}{17}- ChucVu: {14}{17}- TruongHopKhac: {15}{17}- CongVoiGioChuan: {16}{17}{19}", 
				this.Id,
				(this.Stt == null) ? string.Empty : this.Stt.ToString(),
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				(this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString(),
				(this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString(),
				(this.MaLoaiNhanVien == null) ? string.Empty : this.MaLoaiNhanVien.ToString(),
				(this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString(),
				(this.TienCanTren == null) ? string.Empty : this.TienCanTren.ToString(),
				(this.TietTran == null) ? string.Empty : this.TietTran.ToString(),
				(this.HocHam == null) ? string.Empty : this.HocHam.ToString(),
				(this.HocVi == null) ? string.Empty : this.HocVi.ToString(),
				(this.LoaiNhanVien == null) ? string.Empty : this.LoaiNhanVien.ToString(),
				(this.LoaiGiangVien == null) ? string.Empty : this.LoaiGiangVien.ToString(),
				(this.ChucVu == null) ? string.Empty : this.ChucVu.ToString(),
				(this.TruongHopKhac == null) ? string.Empty : this.TruongHopKhac.ToString(),
				(this.CongVoiGioChuan == null) ? string.Empty : this.CongVoiGioChuan.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'QuyDinhTienCanTren' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class QuyDinhTienCanTrenEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "QuyDinhTienCanTren"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// STT : 
		/// </summary>
		public System.Int32? Stt = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		public System.Int32? MaHocHam = null;
		
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		public System.Int32? MaHocVi = null;
		
		/// <summary>
		/// MaLoaiNhanVien : 
		/// </summary>
		public System.Int32? MaLoaiNhanVien = null;
		
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		public System.Int32? MaLoaiGiangVien = null;
		
		/// <summary>
		/// TienCanTren : 
		/// </summary>
		public System.Decimal? TienCanTren = null;
		
		/// <summary>
		/// TietTran : 
		/// </summary>
		public System.Decimal? TietTran = null;
		
		/// <summary>
		/// HocHam : 
		/// </summary>
		public System.String HocHam = null;
		
		/// <summary>
		/// HocVi : 
		/// </summary>
		public System.String HocVi = null;
		
		/// <summary>
		/// LoaiNhanVien : 
		/// </summary>
		public System.String LoaiNhanVien = null;
		
		/// <summary>
		/// LoaiGiangVien : 
		/// </summary>
		public System.String LoaiGiangVien = null;
		
		/// <summary>
		/// ChucVu : 
		/// </summary>
		public System.String ChucVu = null;
		
		/// <summary>
		/// TruongHopKhac : 
		/// </summary>
		public System.String TruongHopKhac = null;
		
		/// <summary>
		/// CongVoiGioChuan : 
		/// </summary>
		public System.Decimal? CongVoiGioChuan = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private HocHam _maHocHamSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="HocHam"/>.
		/// </summary>
		/// <value>The source HocHam for MaHocHam.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual HocHam MaHocHamSource
      	{
            get { return this._maHocHamSource; }
            set { this._maHocHamSource = value; }
      	}
		private HocVi _maHocViSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="HocVi"/>.
		/// </summary>
		/// <value>The source HocVi for MaHocVi.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual HocVi MaHocViSource
      	{
            get { return this._maHocViSource; }
            set { this._maHocViSource = value; }
      	}
		private LoaiGiangVien _maLoaiGiangVienSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="LoaiGiangVien"/>.
		/// </summary>
		/// <value>The source LoaiGiangVien for MaLoaiGiangVien.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual LoaiGiangVien MaLoaiGiangVienSource
      	{
            get { return this._maLoaiGiangVienSource; }
            set { this._maLoaiGiangVienSource = value; }
      	}
		private LoaiNhanVien _maLoaiNhanVienSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="LoaiNhanVien"/>.
		/// </summary>
		/// <value>The source LoaiNhanVien for MaLoaiNhanVien.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual LoaiNhanVien MaLoaiNhanVienSource
      	{
            get { return this._maLoaiNhanVienSource; }
            set { this._maLoaiNhanVienSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			QuyDinhTienCanTrenEntityData _tmp = new QuyDinhTienCanTrenEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Stt = this.Stt;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			_tmp.MaLoaiNhanVien = this.MaLoaiNhanVien;
			_tmp.MaLoaiGiangVien = this.MaLoaiGiangVien;
			_tmp.TienCanTren = this.TienCanTren;
			_tmp.TietTran = this.TietTran;
			_tmp.HocHam = this.HocHam;
			_tmp.HocVi = this.HocVi;
			_tmp.LoaiNhanVien = this.LoaiNhanVien;
			_tmp.LoaiGiangVien = this.LoaiGiangVien;
			_tmp.ChucVu = this.ChucVu;
			_tmp.TruongHopKhac = this.TruongHopKhac;
			_tmp.CongVoiGioChuan = this.CongVoiGioChuan;
			
			#region Source Parent Composite Entities
			if (this.MaHocHamSource != null)
				_tmp.MaHocHamSource = MakeCopyOf(this.MaHocHamSource) as HocHam;
			if (this.MaHocViSource != null)
				_tmp.MaHocViSource = MakeCopyOf(this.MaHocViSource) as HocVi;
			if (this.MaLoaiGiangVienSource != null)
				_tmp.MaLoaiGiangVienSource = MakeCopyOf(this.MaLoaiGiangVienSource) as LoaiGiangVien;
			if (this.MaLoaiNhanVienSource != null)
				_tmp.MaLoaiNhanVienSource = MakeCopyOf(this.MaLoaiNhanVienSource) as LoaiNhanVien;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			QuyDinhTienCanTrenEntityData _tmp = new QuyDinhTienCanTrenEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Stt = this.Stt;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			_tmp.MaLoaiNhanVien = this.MaLoaiNhanVien;
			_tmp.MaLoaiGiangVien = this.MaLoaiGiangVien;
			_tmp.TienCanTren = this.TienCanTren;
			_tmp.TietTran = this.TietTran;
			_tmp.HocHam = this.HocHam;
			_tmp.HocVi = this.HocVi;
			_tmp.LoaiNhanVien = this.LoaiNhanVien;
			_tmp.LoaiGiangVien = this.LoaiGiangVien;
			_tmp.ChucVu = this.ChucVu;
			_tmp.TruongHopKhac = this.TruongHopKhac;
			_tmp.CongVoiGioChuan = this.CongVoiGioChuan;
			
			#region Source Parent Composite Entities
			if (this.MaHocHamSource != null && existingCopies.Contains(this.MaHocHamSource))
				_tmp.MaHocHamSource = existingCopies[this.MaHocHamSource] as HocHam;
			else
				_tmp.MaHocHamSource = MakeCopyOf(this.MaHocHamSource, existingCopies) as HocHam;
			if (this.MaHocViSource != null && existingCopies.Contains(this.MaHocViSource))
				_tmp.MaHocViSource = existingCopies[this.MaHocViSource] as HocVi;
			else
				_tmp.MaHocViSource = MakeCopyOf(this.MaHocViSource, existingCopies) as HocVi;
			if (this.MaLoaiGiangVienSource != null && existingCopies.Contains(this.MaLoaiGiangVienSource))
				_tmp.MaLoaiGiangVienSource = existingCopies[this.MaLoaiGiangVienSource] as LoaiGiangVien;
			else
				_tmp.MaLoaiGiangVienSource = MakeCopyOf(this.MaLoaiGiangVienSource, existingCopies) as LoaiGiangVien;
			if (this.MaLoaiNhanVienSource != null && existingCopies.Contains(this.MaLoaiNhanVienSource))
				_tmp.MaLoaiNhanVienSource = existingCopies[this.MaLoaiNhanVienSource] as LoaiNhanVien;
			else
				_tmp.MaLoaiNhanVienSource = MakeCopyOf(this.MaLoaiNhanVienSource, existingCopies) as LoaiNhanVien;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuyDinhTienCanTrenColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(QuyDinhTienCanTrenColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuyDinhTienCanTrenColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(QuyDinhTienCanTrenColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuyDinhTienCanTrenColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(QuyDinhTienCanTrenColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				QuyDinhTienCanTrenEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new QuyDinhTienCanTrenEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuyDinhTienCanTrenColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(QuyDinhTienCanTrenColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				QuyDinhTienCanTrenEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new QuyDinhTienCanTrenEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region QuyDinhTienCanTrenEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="QuyDinhTienCanTren"/> object.
	/// </remarks>
	public class QuyDinhTienCanTrenEventArgs : System.EventArgs
	{
		private QuyDinhTienCanTrenColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the QuyDinhTienCanTrenEventArgs class.
		///</summary>
		public QuyDinhTienCanTrenEventArgs(QuyDinhTienCanTrenColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the QuyDinhTienCanTrenEventArgs class.
		///</summary>
		public QuyDinhTienCanTrenEventArgs(QuyDinhTienCanTrenColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The QuyDinhTienCanTrenColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="QuyDinhTienCanTrenColumn" />
		public QuyDinhTienCanTrenColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all QuyDinhTienCanTren related events.
	///</summary>
	public delegate void QuyDinhTienCanTrenEventHandler(object sender, QuyDinhTienCanTrenEventArgs e);
	
	#region QuyDinhTienCanTrenComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class QuyDinhTienCanTrenComparer : System.Collections.Generic.IComparer<QuyDinhTienCanTren>
	{
		QuyDinhTienCanTrenColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:QuyDinhTienCanTrenComparer"/> class.
        /// </summary>
		public QuyDinhTienCanTrenComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:QuyDinhTienCanTrenComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public QuyDinhTienCanTrenComparer(QuyDinhTienCanTrenColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="QuyDinhTienCanTren"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="QuyDinhTienCanTren"/> to compare.</param>
        /// <param name="b">The second <c>QuyDinhTienCanTren</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(QuyDinhTienCanTren a, QuyDinhTienCanTren b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(QuyDinhTienCanTren entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(QuyDinhTienCanTren a, QuyDinhTienCanTren b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public QuyDinhTienCanTrenColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region QuyDinhTienCanTrenKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="QuyDinhTienCanTren"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class QuyDinhTienCanTrenKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the QuyDinhTienCanTrenKey class.
		/// </summary>
		public QuyDinhTienCanTrenKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the QuyDinhTienCanTrenKey class.
		/// </summary>
		public QuyDinhTienCanTrenKey(QuyDinhTienCanTrenBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the QuyDinhTienCanTrenKey class.
		/// </summary>
		public QuyDinhTienCanTrenKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private QuyDinhTienCanTrenBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public QuyDinhTienCanTrenBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region QuyDinhTienCanTrenColumn Enum
	
	/// <summary>
	/// Enumerate the QuyDinhTienCanTren columns.
	/// </summary>
	[Serializable]
	public enum QuyDinhTienCanTrenColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// Stt : 
		/// </summary>
		[EnumTextValue("Stt")]
		[ColumnEnum("STT", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Stt = 2,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		NamHoc = 3,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		HocKy = 4,
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		[EnumTextValue("Ma Hoc Ham")]
		[ColumnEnum("MaHocHam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocHam = 5,
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		[EnumTextValue("Ma Hoc Vi")]
		[ColumnEnum("MaHocVi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocVi = 6,
		/// <summary>
		/// MaLoaiNhanVien : 
		/// </summary>
		[EnumTextValue("Ma Loai Nhan Vien")]
		[ColumnEnum("MaLoaiNhanVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaLoaiNhanVien = 7,
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Loai Giang Vien")]
		[ColumnEnum("MaLoaiGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaLoaiGiangVien = 8,
		/// <summary>
		/// TienCanTren : 
		/// </summary>
		[EnumTextValue("Tien Can Tren")]
		[ColumnEnum("TienCanTren", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TienCanTren = 9,
		/// <summary>
		/// TietTran : 
		/// </summary>
		[EnumTextValue("Tiet Tran")]
		[ColumnEnum("TietTran", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietTran = 10,
		/// <summary>
		/// HocHam : 
		/// </summary>
		[EnumTextValue("Hoc Ham")]
		[ColumnEnum("HocHam", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1000)]
		HocHam = 11,
		/// <summary>
		/// HocVi : 
		/// </summary>
		[EnumTextValue("Hoc Vi")]
		[ColumnEnum("HocVi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1000)]
		HocVi = 12,
		/// <summary>
		/// LoaiNhanVien : 
		/// </summary>
		[EnumTextValue("Loai Nhan Vien")]
		[ColumnEnum("LoaiNhanVien", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1000)]
		LoaiNhanVien = 13,
		/// <summary>
		/// LoaiGiangVien : 
		/// </summary>
		[EnumTextValue("Loai Giang Vien")]
		[ColumnEnum("LoaiGiangVien", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1000)]
		LoaiGiangVien = 14,
		/// <summary>
		/// ChucVu : 
		/// </summary>
		[EnumTextValue("Chuc Vu")]
		[ColumnEnum("ChucVu", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1000)]
		ChucVu = 15,
		/// <summary>
		/// TruongHopKhac : 
		/// </summary>
		[EnumTextValue("Truong Hop Khac")]
		[ColumnEnum("TruongHopKhac", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1000)]
		TruongHopKhac = 16,
		/// <summary>
		/// CongVoiGioChuan : 
		/// </summary>
		[EnumTextValue("Cong Voi Gio Chuan")]
		[ColumnEnum("CongVoiGioChuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CongVoiGioChuan = 17
	}//End enum

	#endregion QuyDinhTienCanTrenColumn Enum

} // end namespace
