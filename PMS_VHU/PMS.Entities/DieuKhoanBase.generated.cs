
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file DieuKhoan.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'DieuKhoan' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DieuKhoanBase : EntityBase, IDieuKhoan, IEntityId<DieuKhoanKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DieuKhoanEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DieuKhoanEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DieuKhoanEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<DieuKhoan> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DieuKhoanEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DieuKhoanEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DieuKhoanBase"/> instance.
		///</summary>
		public DieuKhoanBase()
		{
			this.entityData = new DieuKhoanEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DieuKhoanBase"/> instance.
		///</summary>
		///<param name="_parentId"></param>
		///<param name="_phanLoai"></param>
		///<param name="_menu"></param>
		///<param name="_beginGroup"></param>
		///<param name="_ribbonStyle"></param>
		///<param name="_dataLayout"></param>
		///<param name="_tenChucNang"></param>
		///<param name="_ngayNhap"></param>
		///<param name="_nguoiNhap"></param>
		///<param name="_tenForm"></param>
		///<param name="_hinhAnh"></param>
		///<param name="_thuTu"></param>
		///<param name="_tenPhuongThuc"></param>
		///<param name="_thamSo"></param>
		///<param name="_kieuForm"></param>
		///<param name="_noiDung"></param>
		///<param name="_trangThai"></param>
		///<param name="_trangThaiChot"></param>
		public DieuKhoanBase(System.Int32? _parentId, System.String _phanLoai, System.Boolean? _menu, 
			System.Boolean? _beginGroup, System.Boolean? _ribbonStyle, System.Byte[] _dataLayout, System.String _tenChucNang, 
			System.DateTime? _ngayNhap, System.String _nguoiNhap, System.String _tenForm, System.Byte[] _hinhAnh, 
			System.Int32? _thuTu, System.String _tenPhuongThuc, System.String _thamSo, System.String _kieuForm, 
			System.String _noiDung, System.Boolean? _trangThai, System.Boolean? _trangThaiChot)
		{
			this.entityData = new DieuKhoanEntityData();
			this.backupData = null;

			this.ParentId = _parentId;
			this.PhanLoai = _phanLoai;
			this.Menu = _menu;
			this.BeginGroup = _beginGroup;
			this.RibbonStyle = _ribbonStyle;
			this.DataLayout = _dataLayout;
			this.TenChucNang = _tenChucNang;
			this.NgayNhap = _ngayNhap;
			this.NguoiNhap = _nguoiNhap;
			this.TenForm = _tenForm;
			this.HinhAnh = _hinhAnh;
			this.ThuTu = _thuTu;
			this.TenPhuongThuc = _tenPhuongThuc;
			this.ThamSo = _thamSo;
			this.KieuForm = _kieuForm;
			this.NoiDung = _noiDung;
			this.TrangThai = _trangThai;
			this.TrangThaiChot = _trangThaiChot;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="DieuKhoan"/> instance.
		///</summary>
		///<param name="_parentId"></param>
		///<param name="_phanLoai"></param>
		///<param name="_menu"></param>
		///<param name="_beginGroup"></param>
		///<param name="_ribbonStyle"></param>
		///<param name="_dataLayout"></param>
		///<param name="_tenChucNang"></param>
		///<param name="_ngayNhap"></param>
		///<param name="_nguoiNhap"></param>
		///<param name="_tenForm"></param>
		///<param name="_hinhAnh"></param>
		///<param name="_thuTu"></param>
		///<param name="_tenPhuongThuc"></param>
		///<param name="_thamSo"></param>
		///<param name="_kieuForm"></param>
		///<param name="_noiDung"></param>
		///<param name="_trangThai"></param>
		///<param name="_trangThaiChot"></param>
		public static DieuKhoan CreateDieuKhoan(System.Int32? _parentId, System.String _phanLoai, System.Boolean? _menu, 
			System.Boolean? _beginGroup, System.Boolean? _ribbonStyle, System.Byte[] _dataLayout, System.String _tenChucNang, 
			System.DateTime? _ngayNhap, System.String _nguoiNhap, System.String _tenForm, System.Byte[] _hinhAnh, 
			System.Int32? _thuTu, System.String _tenPhuongThuc, System.String _thamSo, System.String _kieuForm, 
			System.String _noiDung, System.Boolean? _trangThai, System.Boolean? _trangThaiChot)
		{
			DieuKhoan newDieuKhoan = new DieuKhoan();
			newDieuKhoan.ParentId = _parentId;
			newDieuKhoan.PhanLoai = _phanLoai;
			newDieuKhoan.Menu = _menu;
			newDieuKhoan.BeginGroup = _beginGroup;
			newDieuKhoan.RibbonStyle = _ribbonStyle;
			newDieuKhoan.DataLayout = _dataLayout;
			newDieuKhoan.TenChucNang = _tenChucNang;
			newDieuKhoan.NgayNhap = _ngayNhap;
			newDieuKhoan.NguoiNhap = _nguoiNhap;
			newDieuKhoan.TenForm = _tenForm;
			newDieuKhoan.HinhAnh = _hinhAnh;
			newDieuKhoan.ThuTu = _thuTu;
			newDieuKhoan.TenPhuongThuc = _tenPhuongThuc;
			newDieuKhoan.ThamSo = _thamSo;
			newDieuKhoan.KieuForm = _kieuForm;
			newDieuKhoan.NoiDung = _noiDung;
			newDieuKhoan.TrangThai = _trangThai;
			newDieuKhoan.TrangThaiChot = _trangThaiChot;
			return newDieuKhoan;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Id is required")]




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(DieuKhoanColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParentId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ParentId
		{
			get
			{
				return this.entityData.ParentId; 
			}
			
			set
			{
				if (this.entityData.ParentId == value)
					return;
				
                OnPropertyChanging("ParentId");                    
				OnColumnChanging(DieuKhoanColumn.ParentId, this.entityData.ParentId);
				this.entityData.ParentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.ParentId, this.entityData.ParentId);
				OnPropertyChanged("ParentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhanLoai property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String PhanLoai
		{
			get
			{
				return this.entityData.PhanLoai; 
			}
			
			set
			{
				if (this.entityData.PhanLoai == value)
					return;
				
                OnPropertyChanging("PhanLoai");                    
				OnColumnChanging(DieuKhoanColumn.PhanLoai, this.entityData.PhanLoai);
				this.entityData.PhanLoai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.PhanLoai, this.entityData.PhanLoai);
				OnPropertyChanged("PhanLoai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Menu property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Menu
		{
			get
			{
				return this.entityData.Menu; 
			}
			
			set
			{
				if (this.entityData.Menu == value)
					return;
				
                OnPropertyChanging("Menu");                    
				OnColumnChanging(DieuKhoanColumn.Menu, this.entityData.Menu);
				this.entityData.Menu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.Menu, this.entityData.Menu);
				OnPropertyChanged("Menu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BeginGroup property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? BeginGroup
		{
			get
			{
				return this.entityData.BeginGroup; 
			}
			
			set
			{
				if (this.entityData.BeginGroup == value)
					return;
				
                OnPropertyChanging("BeginGroup");                    
				OnColumnChanging(DieuKhoanColumn.BeginGroup, this.entityData.BeginGroup);
				this.entityData.BeginGroup = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.BeginGroup, this.entityData.BeginGroup);
				OnPropertyChanged("BeginGroup");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RibbonStyle property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? RibbonStyle
		{
			get
			{
				return this.entityData.RibbonStyle; 
			}
			
			set
			{
				if (this.entityData.RibbonStyle == value)
					return;
				
                OnPropertyChanging("RibbonStyle");                    
				OnColumnChanging(DieuKhoanColumn.RibbonStyle, this.entityData.RibbonStyle);
				this.entityData.RibbonStyle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.RibbonStyle, this.entityData.RibbonStyle);
				OnPropertyChanged("RibbonStyle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DataLayout property. 
		///		
		/// </summary>
		/// <value>This type is image.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte[] DataLayout
		{
			get
			{
				return this.entityData.DataLayout; 
			}
			
			set
			{
				if (this.entityData.DataLayout == value)
					return;
				
                OnPropertyChanging("DataLayout");                    
				OnColumnChanging(DieuKhoanColumn.DataLayout, this.entityData.DataLayout);
				this.entityData.DataLayout = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.DataLayout, this.entityData.DataLayout);
				OnPropertyChanged("DataLayout");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenChucNang property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String TenChucNang
		{
			get
			{
				return this.entityData.TenChucNang; 
			}
			
			set
			{
				if (this.entityData.TenChucNang == value)
					return;
				
                OnPropertyChanging("TenChucNang");                    
				OnColumnChanging(DieuKhoanColumn.TenChucNang, this.entityData.TenChucNang);
				this.entityData.TenChucNang = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.TenChucNang, this.entityData.TenChucNang);
				OnPropertyChanged("TenChucNang");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayNhap property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayNhap
		{
			get
			{
				return this.entityData.NgayNhap; 
			}
			
			set
			{
				if (this.entityData.NgayNhap == value)
					return;
				
                OnPropertyChanging("NgayNhap");                    
				OnColumnChanging(DieuKhoanColumn.NgayNhap, this.entityData.NgayNhap);
				this.entityData.NgayNhap = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.NgayNhap, this.entityData.NgayNhap);
				OnPropertyChanged("NgayNhap");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NguoiNhap property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String NguoiNhap
		{
			get
			{
				return this.entityData.NguoiNhap; 
			}
			
			set
			{
				if (this.entityData.NguoiNhap == value)
					return;
				
                OnPropertyChanging("NguoiNhap");                    
				OnColumnChanging(DieuKhoanColumn.NguoiNhap, this.entityData.NguoiNhap);
				this.entityData.NguoiNhap = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.NguoiNhap, this.entityData.NguoiNhap);
				OnPropertyChanged("NguoiNhap");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenForm property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String TenForm
		{
			get
			{
				return this.entityData.TenForm; 
			}
			
			set
			{
				if (this.entityData.TenForm == value)
					return;
				
                OnPropertyChanging("TenForm");                    
				OnColumnChanging(DieuKhoanColumn.TenForm, this.entityData.TenForm);
				this.entityData.TenForm = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.TenForm, this.entityData.TenForm);
				OnPropertyChanged("TenForm");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HinhAnh property. 
		///		
		/// </summary>
		/// <value>This type is image.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte[] HinhAnh
		{
			get
			{
				return this.entityData.HinhAnh; 
			}
			
			set
			{
				if (this.entityData.HinhAnh == value)
					return;
				
                OnPropertyChanging("HinhAnh");                    
				OnColumnChanging(DieuKhoanColumn.HinhAnh, this.entityData.HinhAnh);
				this.entityData.HinhAnh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.HinhAnh, this.entityData.HinhAnh);
				OnPropertyChanged("HinhAnh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThuTu property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ThuTu
		{
			get
			{
				return this.entityData.ThuTu; 
			}
			
			set
			{
				if (this.entityData.ThuTu == value)
					return;
				
                OnPropertyChanging("ThuTu");                    
				OnColumnChanging(DieuKhoanColumn.ThuTu, this.entityData.ThuTu);
				this.entityData.ThuTu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.ThuTu, this.entityData.ThuTu);
				OnPropertyChanged("ThuTu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenPhuongThuc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String TenPhuongThuc
		{
			get
			{
				return this.entityData.TenPhuongThuc; 
			}
			
			set
			{
				if (this.entityData.TenPhuongThuc == value)
					return;
				
                OnPropertyChanging("TenPhuongThuc");                    
				OnColumnChanging(DieuKhoanColumn.TenPhuongThuc, this.entityData.TenPhuongThuc);
				this.entityData.TenPhuongThuc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.TenPhuongThuc, this.entityData.TenPhuongThuc);
				OnPropertyChanged("TenPhuongThuc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThamSo property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ThamSo
		{
			get
			{
				return this.entityData.ThamSo; 
			}
			
			set
			{
				if (this.entityData.ThamSo == value)
					return;
				
                OnPropertyChanging("ThamSo");                    
				OnColumnChanging(DieuKhoanColumn.ThamSo, this.entityData.ThamSo);
				this.entityData.ThamSo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.ThamSo, this.entityData.ThamSo);
				OnPropertyChanged("ThamSo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the KieuForm property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String KieuForm
		{
			get
			{
				return this.entityData.KieuForm; 
			}
			
			set
			{
				if (this.entityData.KieuForm == value)
					return;
				
                OnPropertyChanging("KieuForm");                    
				OnColumnChanging(DieuKhoanColumn.KieuForm, this.entityData.KieuForm);
				this.entityData.KieuForm = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.KieuForm, this.entityData.KieuForm);
				OnPropertyChanged("KieuForm");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NoiDung property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String NoiDung
		{
			get
			{
				return this.entityData.NoiDung; 
			}
			
			set
			{
				if (this.entityData.NoiDung == value)
					return;
				
                OnPropertyChanging("NoiDung");                    
				OnColumnChanging(DieuKhoanColumn.NoiDung, this.entityData.NoiDung);
				this.entityData.NoiDung = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.NoiDung, this.entityData.NoiDung);
				OnPropertyChanged("NoiDung");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrangThai property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? TrangThai
		{
			get
			{
				return this.entityData.TrangThai; 
			}
			
			set
			{
				if (this.entityData.TrangThai == value)
					return;
				
                OnPropertyChanging("TrangThai");                    
				OnColumnChanging(DieuKhoanColumn.TrangThai, this.entityData.TrangThai);
				this.entityData.TrangThai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.TrangThai, this.entityData.TrangThai);
				OnPropertyChanged("TrangThai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrangThaiChot property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? TrangThaiChot
		{
			get
			{
				return this.entityData.TrangThaiChot; 
			}
			
			set
			{
				if (this.entityData.TrangThaiChot == value)
					return;
				
                OnPropertyChanging("TrangThaiChot");                    
				OnColumnChanging(DieuKhoanColumn.TrangThaiChot, this.entityData.TrangThaiChot);
				this.entityData.TrangThaiChot = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieuKhoanColumn.TrangThaiChot, this.entityData.TrangThaiChot);
				OnPropertyChanged("TrangThaiChot");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="DieuKhoan"/>.
		/// </summary>
		/// <value>The source DieuKhoan for ParentId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual DieuKhoan ParentIdSource
      	{
            get { return entityData.ParentIdSource; }
            set { entityData.ParentIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of DieuKhoan objects
		///	which are related to this object through the relation FK_DieuKhoan_DieuKhoan
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DieuKhoan> DieuKhoanCollection
		{
			get { return entityData.DieuKhoanCollection; }
			set { entityData.DieuKhoanCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PhanLoai", "Phan Loai", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenChucNang", "Ten Chuc Nang", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NguoiNhap", "Nguoi Nhap", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenForm", "Ten Form", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenPhuongThuc", "Ten Phuong Thuc", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ThamSo", "Tham So", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("KieuForm", "Kieu Form", 10));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "DieuKhoan"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "ParentID", "PhanLoai", "Menu", "BeginGroup", "RibbonStyle", "DataLayout", "TenChucNang", "NgayNhap", "NguoiNhap", "TenForm", "HinhAnh", "ThuTu", "TenPhuongThuc", "ThamSo", "KieuForm", "NoiDung", "TrangThai", "TrangThaiChot"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DieuKhoanEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (DieuKhoan) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<DieuKhoan>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as DieuKhoan);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed DieuKhoan Entity 
		///</summary>
		protected virtual DieuKhoan Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			DieuKhoan copy = new DieuKhoan();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.ParentId = this.ParentId;
				copy.PhanLoai = this.PhanLoai;
				copy.Menu = this.Menu;
				copy.BeginGroup = this.BeginGroup;
				copy.RibbonStyle = this.RibbonStyle;
				copy.DataLayout = this.DataLayout;
				copy.TenChucNang = this.TenChucNang;
				copy.NgayNhap = this.NgayNhap;
				copy.NguoiNhap = this.NguoiNhap;
				copy.TenForm = this.TenForm;
				copy.HinhAnh = this.HinhAnh;
				copy.ThuTu = this.ThuTu;
				copy.TenPhuongThuc = this.TenPhuongThuc;
				copy.ThamSo = this.ThamSo;
				copy.KieuForm = this.KieuForm;
				copy.NoiDung = this.NoiDung;
				copy.TrangThai = this.TrangThai;
				copy.TrangThaiChot = this.TrangThaiChot;
			
			if (this.ParentIdSource != null && existingCopies.Contains(this.ParentIdSource))
				copy.ParentIdSource = existingCopies[this.ParentIdSource] as DieuKhoan;
			else
				copy.ParentIdSource = MakeCopyOf(this.ParentIdSource, existingCopies) as DieuKhoan;
		
			//deep copy nested objects
			copy.DieuKhoanCollection = (TList<DieuKhoan>) MakeCopyOf(this.DieuKhoanCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed DieuKhoan Entity 
		///</summary>
		public virtual DieuKhoan Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed DieuKhoan Entity which is a deep copy of the current entity.
		///</summary>
		public virtual DieuKhoan DeepCopy()
		{
			return EntityHelper.Clone<DieuKhoan>(this as DieuKhoan);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DieuKhoanEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DieuKhoanEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DieuKhoanEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DieuKhoanColumn column)
		{
			switch(column)
			{
					case DieuKhoanColumn.Id:
					return entityData.Id != _originalData.Id;
					case DieuKhoanColumn.ParentId:
					return entityData.ParentId != _originalData.ParentId;
					case DieuKhoanColumn.PhanLoai:
					return entityData.PhanLoai != _originalData.PhanLoai;
					case DieuKhoanColumn.Menu:
					return entityData.Menu != _originalData.Menu;
					case DieuKhoanColumn.BeginGroup:
					return entityData.BeginGroup != _originalData.BeginGroup;
					case DieuKhoanColumn.RibbonStyle:
					return entityData.RibbonStyle != _originalData.RibbonStyle;
					case DieuKhoanColumn.DataLayout:
					return entityData.DataLayout != _originalData.DataLayout;
					case DieuKhoanColumn.TenChucNang:
					return entityData.TenChucNang != _originalData.TenChucNang;
					case DieuKhoanColumn.NgayNhap:
					return entityData.NgayNhap != _originalData.NgayNhap;
					case DieuKhoanColumn.NguoiNhap:
					return entityData.NguoiNhap != _originalData.NguoiNhap;
					case DieuKhoanColumn.TenForm:
					return entityData.TenForm != _originalData.TenForm;
					case DieuKhoanColumn.HinhAnh:
					return entityData.HinhAnh != _originalData.HinhAnh;
					case DieuKhoanColumn.ThuTu:
					return entityData.ThuTu != _originalData.ThuTu;
					case DieuKhoanColumn.TenPhuongThuc:
					return entityData.TenPhuongThuc != _originalData.TenPhuongThuc;
					case DieuKhoanColumn.ThamSo:
					return entityData.ThamSo != _originalData.ThamSo;
					case DieuKhoanColumn.KieuForm:
					return entityData.KieuForm != _originalData.KieuForm;
					case DieuKhoanColumn.NoiDung:
					return entityData.NoiDung != _originalData.NoiDung;
					case DieuKhoanColumn.TrangThai:
					return entityData.TrangThai != _originalData.TrangThai;
					case DieuKhoanColumn.TrangThaiChot:
					return entityData.TrangThaiChot != _originalData.TrangThaiChot;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DieuKhoanColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.ParentId != _originalData.ParentId;
			result = result || entityData.PhanLoai != _originalData.PhanLoai;
			result = result || entityData.Menu != _originalData.Menu;
			result = result || entityData.BeginGroup != _originalData.BeginGroup;
			result = result || entityData.RibbonStyle != _originalData.RibbonStyle;
			result = result || entityData.DataLayout != _originalData.DataLayout;
			result = result || entityData.TenChucNang != _originalData.TenChucNang;
			result = result || entityData.NgayNhap != _originalData.NgayNhap;
			result = result || entityData.NguoiNhap != _originalData.NguoiNhap;
			result = result || entityData.TenForm != _originalData.TenForm;
			result = result || entityData.HinhAnh != _originalData.HinhAnh;
			result = result || entityData.ThuTu != _originalData.ThuTu;
			result = result || entityData.TenPhuongThuc != _originalData.TenPhuongThuc;
			result = result || entityData.ThamSo != _originalData.ThamSo;
			result = result || entityData.KieuForm != _originalData.KieuForm;
			result = result || entityData.NoiDung != _originalData.NoiDung;
			result = result || entityData.TrangThai != _originalData.TrangThai;
			result = result || entityData.TrangThaiChot != _originalData.TrangThaiChot;
			return result;
		}	
		
		///<summary>
		///  Returns a DieuKhoan Entity with the original data.
		///</summary>
		public DieuKhoan GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDieuKhoan(
				_originalData.ParentId,
				_originalData.PhanLoai,
				_originalData.Menu,
				_originalData.BeginGroup,
				_originalData.RibbonStyle,
				_originalData.DataLayout,
				_originalData.TenChucNang,
				_originalData.NgayNhap,
				_originalData.NguoiNhap,
				_originalData.TenForm,
				_originalData.HinhAnh,
				_originalData.ThuTu,
				_originalData.TenPhuongThuc,
				_originalData.ThamSo,
				_originalData.KieuForm,
				_originalData.NoiDung,
				_originalData.TrangThai,
				_originalData.TrangThaiChot
				);
				
			return (DieuKhoan)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DieuKhoanBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DieuKhoanBase)
				return ValueEquals(this, (DieuKhoanBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DieuKhoanBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.ParentId == null) ? string.Empty : this.ParentId.ToString()).GetHashCode() ^ 
					((this.PhanLoai == null) ? string.Empty : this.PhanLoai.ToString()).GetHashCode() ^ 
					((this.Menu == null) ? string.Empty : this.Menu.ToString()).GetHashCode() ^ 
					((this.BeginGroup == null) ? string.Empty : this.BeginGroup.ToString()).GetHashCode() ^ 
					((this.RibbonStyle == null) ? string.Empty : this.RibbonStyle.ToString()).GetHashCode() ^ 
					((this.DataLayout == null) ? string.Empty : this.DataLayout.ToString()).GetHashCode() ^ 
					((this.TenChucNang == null) ? string.Empty : this.TenChucNang.ToString()).GetHashCode() ^ 
					((this.NgayNhap == null) ? string.Empty : this.NgayNhap.ToString()).GetHashCode() ^ 
					((this.NguoiNhap == null) ? string.Empty : this.NguoiNhap.ToString()).GetHashCode() ^ 
					((this.TenForm == null) ? string.Empty : this.TenForm.ToString()).GetHashCode() ^ 
					((this.HinhAnh == null) ? string.Empty : this.HinhAnh.ToString()).GetHashCode() ^ 
					((this.ThuTu == null) ? string.Empty : this.ThuTu.ToString()).GetHashCode() ^ 
					((this.TenPhuongThuc == null) ? string.Empty : this.TenPhuongThuc.ToString()).GetHashCode() ^ 
					((this.ThamSo == null) ? string.Empty : this.ThamSo.ToString()).GetHashCode() ^ 
					((this.KieuForm == null) ? string.Empty : this.KieuForm.ToString()).GetHashCode() ^ 
					((this.NoiDung == null) ? string.Empty : this.NoiDung.ToString()).GetHashCode() ^ 
					((this.TrangThai == null) ? string.Empty : this.TrangThai.ToString()).GetHashCode() ^ 
					((this.TrangThaiChot == null) ? string.Empty : this.TrangThaiChot.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DieuKhoanBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DieuKhoanBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DieuKhoanBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DieuKhoanBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DieuKhoanBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DieuKhoanBase Object1, DieuKhoanBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.ParentId != null && Object2.ParentId != null )
			{
				if (Object1.ParentId != Object2.ParentId)
					equal = false;
			}
			else if (Object1.ParentId == null ^ Object2.ParentId == null )
			{
				equal = false;
			}
			if ( Object1.PhanLoai != null && Object2.PhanLoai != null )
			{
				if (Object1.PhanLoai != Object2.PhanLoai)
					equal = false;
			}
			else if (Object1.PhanLoai == null ^ Object2.PhanLoai == null )
			{
				equal = false;
			}
			if ( Object1.Menu != null && Object2.Menu != null )
			{
				if (Object1.Menu != Object2.Menu)
					equal = false;
			}
			else if (Object1.Menu == null ^ Object2.Menu == null )
			{
				equal = false;
			}
			if ( Object1.BeginGroup != null && Object2.BeginGroup != null )
			{
				if (Object1.BeginGroup != Object2.BeginGroup)
					equal = false;
			}
			else if (Object1.BeginGroup == null ^ Object2.BeginGroup == null )
			{
				equal = false;
			}
			if ( Object1.RibbonStyle != null && Object2.RibbonStyle != null )
			{
				if (Object1.RibbonStyle != Object2.RibbonStyle)
					equal = false;
			}
			else if (Object1.RibbonStyle == null ^ Object2.RibbonStyle == null )
			{
				equal = false;
			}
			if ( Object1.DataLayout != null && Object2.DataLayout != null )
			{
				if (Object1.DataLayout != Object2.DataLayout)
					equal = false;
			}
			else if (Object1.DataLayout == null ^ Object2.DataLayout == null )
			{
				equal = false;
			}
			if ( Object1.TenChucNang != null && Object2.TenChucNang != null )
			{
				if (Object1.TenChucNang != Object2.TenChucNang)
					equal = false;
			}
			else if (Object1.TenChucNang == null ^ Object2.TenChucNang == null )
			{
				equal = false;
			}
			if ( Object1.NgayNhap != null && Object2.NgayNhap != null )
			{
				if (Object1.NgayNhap != Object2.NgayNhap)
					equal = false;
			}
			else if (Object1.NgayNhap == null ^ Object2.NgayNhap == null )
			{
				equal = false;
			}
			if ( Object1.NguoiNhap != null && Object2.NguoiNhap != null )
			{
				if (Object1.NguoiNhap != Object2.NguoiNhap)
					equal = false;
			}
			else if (Object1.NguoiNhap == null ^ Object2.NguoiNhap == null )
			{
				equal = false;
			}
			if ( Object1.TenForm != null && Object2.TenForm != null )
			{
				if (Object1.TenForm != Object2.TenForm)
					equal = false;
			}
			else if (Object1.TenForm == null ^ Object2.TenForm == null )
			{
				equal = false;
			}
			if ( Object1.HinhAnh != null && Object2.HinhAnh != null )
			{
				if (Object1.HinhAnh != Object2.HinhAnh)
					equal = false;
			}
			else if (Object1.HinhAnh == null ^ Object2.HinhAnh == null )
			{
				equal = false;
			}
			if ( Object1.ThuTu != null && Object2.ThuTu != null )
			{
				if (Object1.ThuTu != Object2.ThuTu)
					equal = false;
			}
			else if (Object1.ThuTu == null ^ Object2.ThuTu == null )
			{
				equal = false;
			}
			if ( Object1.TenPhuongThuc != null && Object2.TenPhuongThuc != null )
			{
				if (Object1.TenPhuongThuc != Object2.TenPhuongThuc)
					equal = false;
			}
			else if (Object1.TenPhuongThuc == null ^ Object2.TenPhuongThuc == null )
			{
				equal = false;
			}
			if ( Object1.ThamSo != null && Object2.ThamSo != null )
			{
				if (Object1.ThamSo != Object2.ThamSo)
					equal = false;
			}
			else if (Object1.ThamSo == null ^ Object2.ThamSo == null )
			{
				equal = false;
			}
			if ( Object1.KieuForm != null && Object2.KieuForm != null )
			{
				if (Object1.KieuForm != Object2.KieuForm)
					equal = false;
			}
			else if (Object1.KieuForm == null ^ Object2.KieuForm == null )
			{
				equal = false;
			}
			if ( Object1.NoiDung != null && Object2.NoiDung != null )
			{
				if (Object1.NoiDung != Object2.NoiDung)
					equal = false;
			}
			else if (Object1.NoiDung == null ^ Object2.NoiDung == null )
			{
				equal = false;
			}
			if ( Object1.TrangThai != null && Object2.TrangThai != null )
			{
				if (Object1.TrangThai != Object2.TrangThai)
					equal = false;
			}
			else if (Object1.TrangThai == null ^ Object2.TrangThai == null )
			{
				equal = false;
			}
			if ( Object1.TrangThaiChot != null && Object2.TrangThaiChot != null )
			{
				if (Object1.TrangThaiChot != Object2.TrangThaiChot)
					equal = false;
			}
			else if (Object1.TrangThaiChot == null ^ Object2.TrangThaiChot == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DieuKhoanBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DieuKhoanComparer GetComparer()
        {
            return new DieuKhoanComparer();
        }
        */

        // Comparer delegates back to DieuKhoan
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(DieuKhoan rhs, DieuKhoanColumn which)
        {
            switch (which)
            {
            	
            	
            	case DieuKhoanColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case DieuKhoanColumn.ParentId:
            		return this.ParentId.Value.CompareTo(rhs.ParentId.Value);
            		
            		                 
            	
            	
            	case DieuKhoanColumn.PhanLoai:
            		return this.PhanLoai.CompareTo(rhs.PhanLoai);
            		
            		                 
            	
            	
            	case DieuKhoanColumn.Menu:
            		return this.Menu.Value.CompareTo(rhs.Menu.Value);
            		
            		                 
            	
            	
            	case DieuKhoanColumn.BeginGroup:
            		return this.BeginGroup.Value.CompareTo(rhs.BeginGroup.Value);
            		
            		                 
            	
            	
            	case DieuKhoanColumn.RibbonStyle:
            		return this.RibbonStyle.Value.CompareTo(rhs.RibbonStyle.Value);
            		
            		                 
            	
            		                 
            	
            	
            	case DieuKhoanColumn.TenChucNang:
            		return this.TenChucNang.CompareTo(rhs.TenChucNang);
            		
            		                 
            	
            	
            	case DieuKhoanColumn.NgayNhap:
            		return this.NgayNhap.Value.CompareTo(rhs.NgayNhap.Value);
            		
            		                 
            	
            	
            	case DieuKhoanColumn.NguoiNhap:
            		return this.NguoiNhap.CompareTo(rhs.NguoiNhap);
            		
            		                 
            	
            	
            	case DieuKhoanColumn.TenForm:
            		return this.TenForm.CompareTo(rhs.TenForm);
            		
            		                 
            	
            		                 
            	
            	
            	case DieuKhoanColumn.ThuTu:
            		return this.ThuTu.Value.CompareTo(rhs.ThuTu.Value);
            		
            		                 
            	
            	
            	case DieuKhoanColumn.TenPhuongThuc:
            		return this.TenPhuongThuc.CompareTo(rhs.TenPhuongThuc);
            		
            		                 
            	
            	
            	case DieuKhoanColumn.ThamSo:
            		return this.ThamSo.CompareTo(rhs.ThamSo);
            		
            		                 
            	
            	
            	case DieuKhoanColumn.KieuForm:
            		return this.KieuForm.CompareTo(rhs.KieuForm);
            		
            		                 
            	
            	
            	case DieuKhoanColumn.NoiDung:
            		return this.NoiDung.CompareTo(rhs.NoiDung);
            		
            		                 
            	
            	
            	case DieuKhoanColumn.TrangThai:
            		return this.TrangThai.Value.CompareTo(rhs.TrangThai.Value);
            		
            		                 
            	
            	
            	case DieuKhoanColumn.TrangThaiChot:
            		return this.TrangThaiChot.Value.CompareTo(rhs.TrangThaiChot.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DieuKhoanKey> Members
		
		// member variable for the EntityId property
		private DieuKhoanKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DieuKhoanKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DieuKhoanKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("DieuKhoan")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- Id: {0}{19}- ParentId: {1}{19}- PhanLoai: {2}{19}- Menu: {3}{19}- BeginGroup: {4}{19}- RibbonStyle: {5}{19}- DataLayout: {6}{19}- TenChucNang: {7}{19}- NgayNhap: {8}{19}- NguoiNhap: {9}{19}- TenForm: {10}{19}- HinhAnh: {11}{19}- ThuTu: {12}{19}- TenPhuongThuc: {13}{19}- ThamSo: {14}{19}- KieuForm: {15}{19}- NoiDung: {16}{19}- TrangThai: {17}{19}- TrangThaiChot: {18}{19}{21}", 
				this.Id,
				(this.ParentId == null) ? string.Empty : this.ParentId.ToString(),
				(this.PhanLoai == null) ? string.Empty : this.PhanLoai.ToString(),
				(this.Menu == null) ? string.Empty : this.Menu.ToString(),
				(this.BeginGroup == null) ? string.Empty : this.BeginGroup.ToString(),
				(this.RibbonStyle == null) ? string.Empty : this.RibbonStyle.ToString(),
				(this.DataLayout == null) ? string.Empty : this.DataLayout.ToString(),
				(this.TenChucNang == null) ? string.Empty : this.TenChucNang.ToString(),
				(this.NgayNhap == null) ? string.Empty : this.NgayNhap.ToString(),
				(this.NguoiNhap == null) ? string.Empty : this.NguoiNhap.ToString(),
				(this.TenForm == null) ? string.Empty : this.TenForm.ToString(),
				(this.HinhAnh == null) ? string.Empty : this.HinhAnh.ToString(),
				(this.ThuTu == null) ? string.Empty : this.ThuTu.ToString(),
				(this.TenPhuongThuc == null) ? string.Empty : this.TenPhuongThuc.ToString(),
				(this.ThamSo == null) ? string.Empty : this.ThamSo.ToString(),
				(this.KieuForm == null) ? string.Empty : this.KieuForm.ToString(),
				(this.NoiDung == null) ? string.Empty : this.NoiDung.ToString(),
				(this.TrangThai == null) ? string.Empty : this.TrangThai.ToString(),
				(this.TrangThaiChot == null) ? string.Empty : this.TrangThaiChot.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'DieuKhoan' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DieuKhoanEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "DieuKhoan"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// ParentID : 
		/// </summary>
		public System.Int32? ParentId = null;
		
		/// <summary>
		/// PhanLoai : 
		/// </summary>
		public System.String PhanLoai = null;
		
		/// <summary>
		/// Menu : 
		/// </summary>
		public System.Boolean? Menu = null;
		
		/// <summary>
		/// BeginGroup : 
		/// </summary>
		public System.Boolean? BeginGroup = null;
		
		/// <summary>
		/// RibbonStyle : 
		/// </summary>
		public System.Boolean? RibbonStyle = null;
		
		/// <summary>
		/// DataLayout : 
		/// </summary>
		public System.Byte[] DataLayout = null;
		
		/// <summary>
		/// TenChucNang : 
		/// </summary>
		public System.String TenChucNang = null;
		
		/// <summary>
		/// NgayNhap : 
		/// </summary>
		public System.DateTime? NgayNhap = null;
		
		/// <summary>
		/// NguoiNhap : 
		/// </summary>
		public System.String NguoiNhap = null;
		
		/// <summary>
		/// TenForm : 
		/// </summary>
		public System.String TenForm = null;
		
		/// <summary>
		/// HinhAnh : 
		/// </summary>
		public System.Byte[] HinhAnh = null;
		
		/// <summary>
		/// ThuTu : 
		/// </summary>
		public System.Int32? ThuTu = null;
		
		/// <summary>
		/// TenPhuongThuc : 
		/// </summary>
		public System.String TenPhuongThuc = null;
		
		/// <summary>
		/// ThamSo : 
		/// </summary>
		public System.String ThamSo = null;
		
		/// <summary>
		/// KieuForm : 
		/// </summary>
		public System.String KieuForm = null;
		
		/// <summary>
		/// NoiDung : 
		/// </summary>
		public System.String NoiDung = null;
		
		/// <summary>
		/// TrangThai : 
		/// </summary>
		public System.Boolean? TrangThai = null;
		
		/// <summary>
		/// TrangThaiChot : 
		/// </summary>
		public System.Boolean? TrangThaiChot = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private DieuKhoan _parentIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="DieuKhoan"/>.
		/// </summary>
		/// <value>The source DieuKhoan for ParentId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual DieuKhoan ParentIdSource
      	{
            get { return this._parentIdSource; }
            set { this._parentIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region DieuKhoanCollection
		
		private TList<DieuKhoan> _dieuKhoanParentId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dieuKhoanParentId
		/// </summary>
		
		public TList<DieuKhoan> DieuKhoanCollection
		{
			get
			{
				if (_dieuKhoanParentId == null)
				{
				_dieuKhoanParentId = new TList<DieuKhoan>();
				}
	
				return _dieuKhoanParentId;
			}
			set { _dieuKhoanParentId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DieuKhoanEntityData _tmp = new DieuKhoanEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.ParentId = this.ParentId;
			_tmp.PhanLoai = this.PhanLoai;
			_tmp.Menu = this.Menu;
			_tmp.BeginGroup = this.BeginGroup;
			_tmp.RibbonStyle = this.RibbonStyle;
			_tmp.DataLayout = this.DataLayout;
			_tmp.TenChucNang = this.TenChucNang;
			_tmp.NgayNhap = this.NgayNhap;
			_tmp.NguoiNhap = this.NguoiNhap;
			_tmp.TenForm = this.TenForm;
			_tmp.HinhAnh = this.HinhAnh;
			_tmp.ThuTu = this.ThuTu;
			_tmp.TenPhuongThuc = this.TenPhuongThuc;
			_tmp.ThamSo = this.ThamSo;
			_tmp.KieuForm = this.KieuForm;
			_tmp.NoiDung = this.NoiDung;
			_tmp.TrangThai = this.TrangThai;
			_tmp.TrangThaiChot = this.TrangThaiChot;
			
			#region Source Parent Composite Entities
			if (this.ParentIdSource != null)
				_tmp.ParentIdSource = MakeCopyOf(this.ParentIdSource) as DieuKhoan;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._dieuKhoanParentId != null)
				_tmp.DieuKhoanCollection = (TList<DieuKhoan>) MakeCopyOf(this.DieuKhoanCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DieuKhoanEntityData _tmp = new DieuKhoanEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.ParentId = this.ParentId;
			_tmp.PhanLoai = this.PhanLoai;
			_tmp.Menu = this.Menu;
			_tmp.BeginGroup = this.BeginGroup;
			_tmp.RibbonStyle = this.RibbonStyle;
			_tmp.DataLayout = this.DataLayout;
			_tmp.TenChucNang = this.TenChucNang;
			_tmp.NgayNhap = this.NgayNhap;
			_tmp.NguoiNhap = this.NguoiNhap;
			_tmp.TenForm = this.TenForm;
			_tmp.HinhAnh = this.HinhAnh;
			_tmp.ThuTu = this.ThuTu;
			_tmp.TenPhuongThuc = this.TenPhuongThuc;
			_tmp.ThamSo = this.ThamSo;
			_tmp.KieuForm = this.KieuForm;
			_tmp.NoiDung = this.NoiDung;
			_tmp.TrangThai = this.TrangThai;
			_tmp.TrangThaiChot = this.TrangThaiChot;
			
			#region Source Parent Composite Entities
			if (this.ParentIdSource != null && existingCopies.Contains(this.ParentIdSource))
				_tmp.ParentIdSource = existingCopies[this.ParentIdSource] as DieuKhoan;
			else
				_tmp.ParentIdSource = MakeCopyOf(this.ParentIdSource, existingCopies) as DieuKhoan;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.DieuKhoanCollection = (TList<DieuKhoan>) MakeCopyOf(this.DieuKhoanCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DieuKhoanColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DieuKhoanColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DieuKhoanColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DieuKhoanColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DieuKhoanColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DieuKhoanColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				DieuKhoanEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DieuKhoanEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DieuKhoanColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DieuKhoanColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DieuKhoanEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DieuKhoanEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DieuKhoanEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="DieuKhoan"/> object.
	/// </remarks>
	public class DieuKhoanEventArgs : System.EventArgs
	{
		private DieuKhoanColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DieuKhoanEventArgs class.
		///</summary>
		public DieuKhoanEventArgs(DieuKhoanColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DieuKhoanEventArgs class.
		///</summary>
		public DieuKhoanEventArgs(DieuKhoanColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DieuKhoanColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DieuKhoanColumn" />
		public DieuKhoanColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all DieuKhoan related events.
	///</summary>
	public delegate void DieuKhoanEventHandler(object sender, DieuKhoanEventArgs e);
	
	#region DieuKhoanComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DieuKhoanComparer : System.Collections.Generic.IComparer<DieuKhoan>
	{
		DieuKhoanColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DieuKhoanComparer"/> class.
        /// </summary>
		public DieuKhoanComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DieuKhoanComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DieuKhoanComparer(DieuKhoanColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="DieuKhoan"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="DieuKhoan"/> to compare.</param>
        /// <param name="b">The second <c>DieuKhoan</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(DieuKhoan a, DieuKhoan b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(DieuKhoan entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(DieuKhoan a, DieuKhoan b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DieuKhoanColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DieuKhoanKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="DieuKhoan"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DieuKhoanKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DieuKhoanKey class.
		/// </summary>
		public DieuKhoanKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DieuKhoanKey class.
		/// </summary>
		public DieuKhoanKey(DieuKhoanBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DieuKhoanKey class.
		/// </summary>
		public DieuKhoanKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DieuKhoanBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DieuKhoanBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DieuKhoanColumn Enum
	
	/// <summary>
	/// Enumerate the DieuKhoan columns.
	/// </summary>
	[Serializable]
	public enum DieuKhoanColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// ParentId : 
		/// </summary>
		[EnumTextValue("Parent Id")]
		[ColumnEnum("ParentID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ParentId = 2,
		/// <summary>
		/// PhanLoai : 
		/// </summary>
		[EnumTextValue("Phan Loai")]
		[ColumnEnum("PhanLoai", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		PhanLoai = 3,
		/// <summary>
		/// Menu : 
		/// </summary>
		[EnumTextValue("Menu")]
		[ColumnEnum("Menu", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Menu = 4,
		/// <summary>
		/// BeginGroup : 
		/// </summary>
		[EnumTextValue("Begin Group")]
		[ColumnEnum("BeginGroup", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		BeginGroup = 5,
		/// <summary>
		/// RibbonStyle : 
		/// </summary>
		[EnumTextValue("Ribbon Style")]
		[ColumnEnum("RibbonStyle", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		RibbonStyle = 6,
		/// <summary>
		/// DataLayout : 
		/// </summary>
		[EnumTextValue("Data Layout")]
		[ColumnEnum("DataLayout", typeof(System.Byte[]), System.Data.DbType.Binary, false, false, true)]
		DataLayout = 7,
		/// <summary>
		/// TenChucNang : 
		/// </summary>
		[EnumTextValue("Ten Chuc Nang")]
		[ColumnEnum("TenChucNang", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		TenChucNang = 8,
		/// <summary>
		/// NgayNhap : 
		/// </summary>
		[EnumTextValue("Ngay Nhap")]
		[ColumnEnum("NgayNhap", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayNhap = 9,
		/// <summary>
		/// NguoiNhap : 
		/// </summary>
		[EnumTextValue("Nguoi Nhap")]
		[ColumnEnum("NguoiNhap", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		NguoiNhap = 10,
		/// <summary>
		/// TenForm : 
		/// </summary>
		[EnumTextValue("Ten Form")]
		[ColumnEnum("TenForm", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		TenForm = 11,
		/// <summary>
		/// HinhAnh : 
		/// </summary>
		[EnumTextValue("Hinh Anh")]
		[ColumnEnum("HinhAnh", typeof(System.Byte[]), System.Data.DbType.Binary, false, false, true)]
		HinhAnh = 12,
		/// <summary>
		/// ThuTu : 
		/// </summary>
		[EnumTextValue("Thu Tu")]
		[ColumnEnum("ThuTu", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ThuTu = 13,
		/// <summary>
		/// TenPhuongThuc : 
		/// </summary>
		[EnumTextValue("Ten Phuong Thuc")]
		[ColumnEnum("TenPhuongThuc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		TenPhuongThuc = 14,
		/// <summary>
		/// ThamSo : 
		/// </summary>
		[EnumTextValue("Tham So")]
		[ColumnEnum("ThamSo", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ThamSo = 15,
		/// <summary>
		/// KieuForm : 
		/// </summary>
		[EnumTextValue("Kieu Form")]
		[ColumnEnum("KieuForm", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		KieuForm = 16,
		/// <summary>
		/// NoiDung : 
		/// </summary>
		[EnumTextValue("Noi Dung")]
		[ColumnEnum("NoiDung", typeof(System.String), System.Data.DbType.String, false, false, true)]
		NoiDung = 17,
		/// <summary>
		/// TrangThai : 
		/// </summary>
		[EnumTextValue("Trang Thai")]
		[ColumnEnum("TrangThai", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TrangThai = 18,
		/// <summary>
		/// TrangThaiChot : 
		/// </summary>
		[EnumTextValue("Trang Thai Chot")]
		[ColumnEnum("TrangThaiChot", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TrangThaiChot = 19
	}//End enum

	#endregion DieuKhoanColumn Enum

} // end namespace
