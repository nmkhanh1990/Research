
/*
	File Generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file KhoiLuongGiangDayCaoDangTest.cs instead.
*/

#region Using directives

using System;
using System.Xml;
using System.Xml.Serialization;
using NUnit.Framework;
using PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;

#endregion

namespace PMS.UnitTests
{
    /// <summary>
    /// Provides tests for the and <see cref="KhoiLuongGiangDayCaoDang"/> objects (entity, collection and repository).
    /// </summary>
   public partial class KhoiLuongGiangDayCaoDangTest
    {
    	// the KhoiLuongGiangDayCaoDang instance used to test the repository.
		protected KhoiLuongGiangDayCaoDang mock;
		
		// the TList<KhoiLuongGiangDayCaoDang> instance used to test the repository.
		protected TList<KhoiLuongGiangDayCaoDang> mockCollection;
		
		protected static TransactionManager CreateTransaction()
		{
			TransactionManager transactionManager = null;
			if (DataRepository.Provider.IsTransactionSupported)
			{
				transactionManager = DataRepository.Provider.CreateTransaction();
				transactionManager.BeginTransaction(System.Data.IsolationLevel.ReadCommitted);
			}			
			return transactionManager;
		}
		       
        /// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>        
        static public void Init_Generated()
        {		
        	System.Console.WriteLine(new String('-', 75));
			System.Console.WriteLine("-- Testing the KhoiLuongGiangDayCaoDang Entity with the {0} --", PMS.Data.DataRepository.Provider.Name);
			System.Console.WriteLine(new String('-', 75));
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
		static public void CleanUp_Generated()
        {   		
			System.Console.WriteLine("All Tests Completed");
			System.Console.WriteLine();
        }
    
    
		/// <summary>
		/// Inserts a mock KhoiLuongGiangDayCaoDang entity into the database.
		/// </summary>
		private void Step_01_Insert_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.KhoiLuongGiangDayCaoDangProvider.Insert(tm, mock), "Insert failed");
										
				System.Console.WriteLine("DataRepository.KhoiLuongGiangDayCaoDangProvider.Insert(mock):");			
				System.Console.WriteLine(mock);			
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Selects all KhoiLuongGiangDayCaoDang objects of the database.
		/// </summary>
		private void Step_02_SelectAll_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Find
				int count = -1;
				
				mockCollection = DataRepository.KhoiLuongGiangDayCaoDangProvider.Find(tm, null, "", 0, 10, out count );
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue Find Command.");
				
				System.Console.WriteLine("DataRepository.KhoiLuongGiangDayCaoDangProvider.Find():");			
				System.Console.WriteLine(mockCollection);
				
				// GetPaged
				count = -1;
				
				mockCollection = DataRepository.KhoiLuongGiangDayCaoDangProvider.GetPaged(tm, 0, 10, out count);
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue GetPaged Command.");
				System.Console.WriteLine("#get paged count: " + count.ToString());
			}
		}
		
		
		
		
		/// <summary>
		/// Deep load all KhoiLuongGiangDayCaoDang children.
		/// </summary>
		private void Step_03_DeepLoad_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				int count = -1;
				mock =  CreateMockInstance(tm);
				mockCollection = DataRepository.KhoiLuongGiangDayCaoDangProvider.GetPaged(tm, 0, 10, out count);
			
				DataRepository.KhoiLuongGiangDayCaoDangProvider.DeepLoading += new EntityProviderBaseCore<KhoiLuongGiangDayCaoDang, KhoiLuongGiangDayCaoDangKey>.DeepLoadingEventHandler(
						delegate(object sender, DeepSessionEventArgs e)
						{
							if (e.DeepSession.Count > 3)
								e.Cancel = true;
						}
					);

				if (mockCollection.Count > 0)
				{
					
					DataRepository.KhoiLuongGiangDayCaoDangProvider.DeepLoad(tm, mockCollection[0]);
					System.Console.WriteLine("KhoiLuongGiangDayCaoDang instance correctly deep loaded at 1 level.");
									
					mockCollection.Add(mock);
					// DataRepository.KhoiLuongGiangDayCaoDangProvider.DeepSave(tm, mockCollection);
				}
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		/// <summary>
		/// Updates a mock KhoiLuongGiangDayCaoDang entity into the database.
		/// </summary>
		private void Step_04_Update_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				KhoiLuongGiangDayCaoDang mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.KhoiLuongGiangDayCaoDangProvider.Insert(tm, mock), "Insert failed");
				
				UpdateMockInstance(tm, mock);
				Assert.IsTrue(DataRepository.KhoiLuongGiangDayCaoDangProvider.Update(tm, mock), "Update failed.");			
				
				System.Console.WriteLine("DataRepository.KhoiLuongGiangDayCaoDangProvider.Update(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Delete the mock KhoiLuongGiangDayCaoDang entity into the database.
		/// </summary>
		private void Step_05_Delete_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  (KhoiLuongGiangDayCaoDang)CreateMockInstance(tm);
				DataRepository.KhoiLuongGiangDayCaoDangProvider.Insert(tm, mock);
			
				Assert.IsTrue(DataRepository.KhoiLuongGiangDayCaoDangProvider.Delete(tm, mock), "Delete failed.");
				System.Console.WriteLine("DataRepository.KhoiLuongGiangDayCaoDangProvider.Delete(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock KhoiLuongGiangDayCaoDang entity into a temporary file.
		/// </summary>
		private void Step_06_SerializeEntity_Generated()
		{	
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  CreateMockInstance(tm);
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_KhoiLuongGiangDayCaoDang.xml");
			
				EntityHelper.SerializeXml(mock, fileName);
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock not found");
					
				System.Console.WriteLine("mock correctly serialized to a temporary file.");			
			}
		}
		
		/// <summary>
		/// Deserialize the mock KhoiLuongGiangDayCaoDang entity from a temporary file.
		/// </summary>
		private void Step_07_DeserializeEntity_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_KhoiLuongGiangDayCaoDang.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			using (System.IO.StreamReader sr = System.IO.File.OpenText(fileName))
			{
				object item = EntityHelper.DeserializeEntityXml<KhoiLuongGiangDayCaoDang>(sr.ReadToEnd());
				sr.Close();
			}
			System.IO.File.Delete(fileName);
			
			System.Console.WriteLine("mock correctly deserialized from a temporary file.");
		}
		
		/// <summary>
		/// Serialize a KhoiLuongGiangDayCaoDang collection into a temporary file.
		/// </summary>
		private void Step_08_SerializeCollection_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_KhoiLuongGiangDayCaoDangCollection.xml");
				
				mock = CreateMockInstance(tm);
				TList<KhoiLuongGiangDayCaoDang> mockCollection = new TList<KhoiLuongGiangDayCaoDang>();
				mockCollection.Add(mock);
			
				EntityHelper.SerializeXml(mockCollection, fileName);
				
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock collection not found");
				System.Console.WriteLine("TList<KhoiLuongGiangDayCaoDang> correctly serialized to a temporary file.");					
			}
		}
		
		
		/// <summary>
		/// Deserialize a KhoiLuongGiangDayCaoDang collection from a temporary file.
		/// </summary>
		private void Step_09_DeserializeCollection_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_KhoiLuongGiangDayCaoDangCollection.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			XmlSerializer mySerializer = new XmlSerializer(typeof(TList<KhoiLuongGiangDayCaoDang>)); 
			using (System.IO.FileStream myFileStream = new System.IO.FileStream(fileName,  System.IO.FileMode.Open))
			{
				TList<KhoiLuongGiangDayCaoDang> mockCollection = (TList<KhoiLuongGiangDayCaoDang>) mySerializer.Deserialize(myFileStream);
				myFileStream.Close();
			}
			
			System.IO.File.Delete(fileName);
			System.Console.WriteLine("TList<KhoiLuongGiangDayCaoDang> correctly deserialized from a temporary file.");	
		}
		#endregion
		
		
		
		/// <summary>
		/// Check the foreign key dal methods.
		/// </summary>
		private void Step_10_FK_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				KhoiLuongGiangDayCaoDang entity = CreateMockInstance(tm);
				bool result = DataRepository.KhoiLuongGiangDayCaoDangProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test FK, Insert Failed");
				
				TList<KhoiLuongGiangDayCaoDang> t0 = DataRepository.KhoiLuongGiangDayCaoDangProvider.GetByMaCauHinhChotGio(tm, entity.MaCauHinhChotGio, 0, 10);
			}
		}
		
		
		/// <summary>
		/// Check the indexes dal methods.
		/// </summary>
		private void Step_11_IX_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				KhoiLuongGiangDayCaoDang entity = CreateMockInstance(tm);
				bool result = DataRepository.KhoiLuongGiangDayCaoDangProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test IX, Insert Failed");

			
				KhoiLuongGiangDayCaoDang t0 = DataRepository.KhoiLuongGiangDayCaoDangProvider.GetByMaKhoiLuongCaoDang(tm, entity.MaKhoiLuongCaoDang);
			}
		}
		
		/// <summary>
		/// Test methods exposed by the EntityHelper class.
		/// </summary>
		private void Step_20_TestEntityHelper_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				
				KhoiLuongGiangDayCaoDang entity = mock.Copy() as KhoiLuongGiangDayCaoDang;
				entity = (KhoiLuongGiangDayCaoDang)mock.Clone();
				Assert.IsTrue(KhoiLuongGiangDayCaoDang.ValueEquals(entity, mock), "Clone is not working");
			}
		}
		
		/// <summary>
		/// Test Find using the Query class
		/// </summary>
		private void Step_30_TestFindByQuery_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Insert Mock Instance
				KhoiLuongGiangDayCaoDang mock = CreateMockInstance(tm);
				bool result = DataRepository.KhoiLuongGiangDayCaoDangProvider.Insert(tm, mock);
				
				Assert.IsTrue(result, "Could Not Test FindByQuery, Insert Failed");

				KhoiLuongGiangDayCaoDangQuery query = new KhoiLuongGiangDayCaoDangQuery();
			
				query.AppendEquals(KhoiLuongGiangDayCaoDangColumn.MaKhoiLuongCaoDang, mock.MaKhoiLuongCaoDang.ToString());
				if(mock.MaGiangVienQuanLy != null)
					query.AppendEquals(KhoiLuongGiangDayCaoDangColumn.MaGiangVienQuanLy, mock.MaGiangVienQuanLy.ToString());
				if(mock.MaLopHocPhan != null)
					query.AppendEquals(KhoiLuongGiangDayCaoDangColumn.MaLopHocPhan, mock.MaLopHocPhan.ToString());
				if(mock.SiSoLop != null)
					query.AppendEquals(KhoiLuongGiangDayCaoDangColumn.SiSoLop, mock.SiSoLop.ToString());
				if(mock.MaMonHoc != null)
					query.AppendEquals(KhoiLuongGiangDayCaoDangColumn.MaMonHoc, mock.MaMonHoc.ToString());
				if(mock.TietThucDayLt != null)
					query.AppendEquals(KhoiLuongGiangDayCaoDangColumn.TietThucDayLt, mock.TietThucDayLt.ToString());
				if(mock.TietThucDayTh != null)
					query.AppendEquals(KhoiLuongGiangDayCaoDangColumn.TietThucDayTh, mock.TietThucDayTh.ToString());
				if(mock.MaCauHinhChotGio != null)
					query.AppendEquals(KhoiLuongGiangDayCaoDangColumn.MaCauHinhChotGio, mock.MaCauHinhChotGio.ToString());
				if(mock.TenLopHocPhan != null)
					query.AppendEquals(KhoiLuongGiangDayCaoDangColumn.TenLopHocPhan, mock.TenLopHocPhan.ToString());
				if(mock.MaLoaiGiangVien != null)
					query.AppendEquals(KhoiLuongGiangDayCaoDangColumn.MaLoaiGiangVien, mock.MaLoaiGiangVien.ToString());
				if(mock.MaHocHam != null)
					query.AppendEquals(KhoiLuongGiangDayCaoDangColumn.MaHocHam, mock.MaHocHam.ToString());
				if(mock.MaHocVi != null)
					query.AppendEquals(KhoiLuongGiangDayCaoDangColumn.MaHocVi, mock.MaHocVi.ToString());
				
				TList<KhoiLuongGiangDayCaoDang> results = DataRepository.KhoiLuongGiangDayCaoDangProvider.Find(tm, query);
				
				Assert.IsTrue(results.Count == 1, "Find is not working correctly.  Failed to find the mock instance");
			}
		}
						
		#region Mock Instance
		///<summary>
		///  Returns a Typed KhoiLuongGiangDayCaoDang Entity with mock values.
		///</summary>
		static public KhoiLuongGiangDayCaoDang CreateMockInstance_Generated(TransactionManager tm)
		{		
			KhoiLuongGiangDayCaoDang mock = new KhoiLuongGiangDayCaoDang();
						
			mock.MaGiangVienQuanLy = TestUtility.Instance.RandomString(9, false);;
			mock.MaLopHocPhan = TestUtility.Instance.RandomString(14, false);;
			mock.SiSoLop = TestUtility.Instance.RandomNumber();
			mock.MaMonHoc = TestUtility.Instance.RandomString(9, false);;
			mock.TietThucDayLt = TestUtility.Instance.RandomNumber();
			mock.TietThucDayTh = TestUtility.Instance.RandomNumber();
			mock.TenLopHocPhan = TestUtility.Instance.RandomString(249, false);;
			mock.MaLoaiGiangVien = TestUtility.Instance.RandomNumber();
			mock.MaHocHam = TestUtility.Instance.RandomNumber();
			mock.MaHocVi = TestUtility.Instance.RandomNumber();
			
			int count0 = 0;
			TList<CauHinhChotGio> _collection0 = DataRepository.CauHinhChotGioProvider.GetPaged(tm, 0, 10, out count0);
			//_collection0.Shuffle();
			if (_collection0.Count > 0)
			{
				mock.MaCauHinhChotGio = _collection0[0].MaCauHinhChotGio;
						
			}
		
			// create a temporary collection and add the item to it
			TList<KhoiLuongGiangDayCaoDang> tempMockCollection = new TList<KhoiLuongGiangDayCaoDang>();
			tempMockCollection.Add(mock);
			tempMockCollection.Remove(mock);
			
		
		   return (KhoiLuongGiangDayCaoDang)mock;
		}
		
		
		///<summary>
		///  Update the Typed KhoiLuongGiangDayCaoDang Entity with modified mock values.
		///</summary>
		static public void UpdateMockInstance_Generated(TransactionManager tm, KhoiLuongGiangDayCaoDang mock)
		{
			mock.MaGiangVienQuanLy = TestUtility.Instance.RandomString(9, false);;
			mock.MaLopHocPhan = TestUtility.Instance.RandomString(14, false);;
			mock.SiSoLop = TestUtility.Instance.RandomNumber();
			mock.MaMonHoc = TestUtility.Instance.RandomString(9, false);;
			mock.TietThucDayLt = TestUtility.Instance.RandomNumber();
			mock.TietThucDayTh = TestUtility.Instance.RandomNumber();
			mock.TenLopHocPhan = TestUtility.Instance.RandomString(249, false);;
			mock.MaLoaiGiangVien = TestUtility.Instance.RandomNumber();
			mock.MaHocHam = TestUtility.Instance.RandomNumber();
			mock.MaHocVi = TestUtility.Instance.RandomNumber();
			
			int count0 = 0;
			TList<CauHinhChotGio> _collection0 = DataRepository.CauHinhChotGioProvider.GetPaged(tm, 0, 10, out count0);
			//_collection0.Shuffle();
			if (_collection0.Count > 0)
			{
				mock.MaCauHinhChotGio = _collection0[0].MaCauHinhChotGio;
			}
		}
		#endregion
    }
}
